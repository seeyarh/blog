<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="9967"><g><title>[[heap]] (30 samples, 0.30%)</title><rect x="0.0000%" y="645" width="0.3010%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="30"/><text x="0.2500%" y="655.50"></text></g><g><title>xdpsock::xsk::rx::XskRx::recv_apply (30 samples, 0.30%)</title><rect x="0.0000%" y="629" width="0.3010%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="30"/><text x="0.2500%" y="639.50"></text></g><g><title>[libc-2.32.so] (2 samples, 0.02%)</title><rect x="0.3010%" y="629" width="0.0201%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="2"/><text x="0.5510%" y="639.50"></text></g><g><title>_xsk_ring_prod__fill_addr (1 samples, 0.01%)</title><rect x="0.3211%" y="629" width="0.0100%" height="15" fill="rgb(248,212,6)" fg:x="32" fg:w="1"/><text x="0.5711%" y="639.50"></text></g><g><title>dev_to_dev::filter_pkt (1 samples, 0.01%)</title><rect x="0.3311%" y="629" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="33" fg:w="1"/><text x="0.5811%" y="639.50"></text></g><g><title>dev_to_dev::rx_pkts (19 samples, 0.19%)</title><rect x="0.3411%" y="629" width="0.1906%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="19"/><text x="0.5911%" y="639.50"></text></g><g><title>etherparse::internet::ipv4::Ipv4HeaderSlice::destination (3 samples, 0.03%)</title><rect x="0.5318%" y="629" width="0.0301%" height="15" fill="rgb(207,160,47)" fg:x="53" fg:w="3"/><text x="0.7818%" y="639.50"></text></g><g><title>etherparse::internet::ipv4::Ipv4HeaderSlice::source (3 samples, 0.03%)</title><rect x="0.5619%" y="629" width="0.0301%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="3"/><text x="0.8119%" y="639.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_ipv4 (6 samples, 0.06%)</title><rect x="0.5920%" y="629" width="0.0602%" height="15" fill="rgb(218,30,26)" fg:x="59" fg:w="6"/><text x="0.8420%" y="639.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_udp (2 samples, 0.02%)</title><rect x="0.6321%" y="613" width="0.0201%" height="15" fill="rgb(220,122,19)" fg:x="63" fg:w="2"/><text x="0.8821%" y="623.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_payload (2 samples, 0.02%)</title><rect x="0.6321%" y="597" width="0.0201%" height="15" fill="rgb(250,228,42)" fg:x="63" fg:w="2"/><text x="0.8821%" y="607.50"></text></g><g><title>[anon] (37 samples, 0.37%)</title><rect x="0.3010%" y="645" width="0.3712%" height="15" fill="rgb(240,193,28)" fg:x="30" fg:w="37"/><text x="0.5510%" y="655.50"></text></g><g><title>etherparse::transport::udp::UdpHeaderSlice::source_port (2 samples, 0.02%)</title><rect x="0.6522%" y="629" width="0.0201%" height="15" fill="rgb(216,20,37)" fg:x="65" fg:w="2"/><text x="0.9022%" y="639.50"></text></g><g><title>__poll (9 samples, 0.09%)</title><rect x="0.6722%" y="629" width="0.0903%" height="15" fill="rgb(206,188,39)" fg:x="67" fg:w="9"/><text x="0.9222%" y="639.50"></text></g><g><title>_xsk_ring_prod__needs_wakeup (21 samples, 0.21%)</title><rect x="0.7625%" y="629" width="0.2107%" height="15" fill="rgb(217,207,13)" fg:x="76" fg:w="21"/><text x="1.0125%" y="639.50"></text></g><g><title>dev_to_dev::filter_pkt (10 samples, 0.10%)</title><rect x="0.9732%" y="629" width="0.1003%" height="15" fill="rgb(231,73,38)" fg:x="97" fg:w="10"/><text x="1.2232%" y="639.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_ipv4 (2 samples, 0.02%)</title><rect x="1.0735%" y="629" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="107" fg:w="2"/><text x="1.3235%" y="639.50"></text></g><g><title>etherparse::packet_slicing::SlicedPacket::from_ethernet (3 samples, 0.03%)</title><rect x="1.0936%" y="629" width="0.0301%" height="15" fill="rgb(210,31,41)" fg:x="109" fg:w="3"/><text x="1.3436%" y="639.50"></text></g><g><title>xdpsock::socket::socket::RxQueue::poll_and_consume (16 samples, 0.16%)</title><rect x="1.4247%" y="613" width="0.1605%" height="15" fill="rgb(221,200,47)" fg:x="142" fg:w="16"/><text x="1.6747%" y="623.50"></text></g><g><title>xdpsock::socket::poll::poll_read (16 samples, 0.16%)</title><rect x="1.4247%" y="597" width="0.1605%" height="15" fill="rgb(226,26,5)" fg:x="142" fg:w="16"/><text x="1.6747%" y="607.50"></text></g><g><title>xdpsock::socket::poll::poll (16 samples, 0.16%)</title><rect x="1.4247%" y="581" width="0.1605%" height="15" fill="rgb(249,33,26)" fg:x="142" fg:w="16"/><text x="1.6747%" y="591.50"></text></g><g><title>dev_to_dev::rx_pkts::{{closure}} (3 samples, 0.03%)</title><rect x="1.5852%" y="597" width="0.0301%" height="15" fill="rgb(235,183,28)" fg:x="158" fg:w="3"/><text x="1.8352%" y="607.50"></text></g><g><title>[unknown] (95 samples, 0.95%)</title><rect x="0.6722%" y="645" width="0.9531%" height="15" fill="rgb(221,5,38)" fg:x="67" fg:w="95"/><text x="0.9222%" y="655.50"></text></g><g><title>xdpsock::xsk::rx::XskRx::recv_apply (50 samples, 0.50%)</title><rect x="1.1237%" y="629" width="0.5017%" height="15" fill="rgb(247,18,42)" fg:x="112" fg:w="50"/><text x="1.3737%" y="639.50"></text></g><g><title>xdpsock::xsk::rx::XskRx::apply_batch (4 samples, 0.04%)</title><rect x="1.5852%" y="613" width="0.0401%" height="15" fill="rgb(241,131,45)" fg:x="158" fg:w="4"/><text x="1.8352%" y="623.50"></text></g><g><title>xdpsock::umem::umem::FillQueue::produce_and_wakeup (1 samples, 0.01%)</title><rect x="1.6153%" y="597" width="0.0100%" height="15" fill="rgb(249,31,29)" fg:x="161" fg:w="1"/><text x="1.8653%" y="607.50"></text></g><g><title>xdpsock::umem::umem::FillQueue::produce (1 samples, 0.01%)</title><rect x="1.6153%" y="581" width="0.0100%" height="15" fill="rgb(225,111,53)" fg:x="161" fg:w="1"/><text x="1.8653%" y="591.50"></text></g><g><title>_start (1 samples, 0.01%)</title><rect x="1.6254%" y="645" width="0.0100%" height="15" fill="rgb(238,160,17)" fg:x="162" fg:w="1"/><text x="1.8754%" y="655.50"></text></g><g><title>__libc_start_main (1 samples, 0.01%)</title><rect x="1.6254%" y="629" width="0.0100%" height="15" fill="rgb(214,148,48)" fg:x="162" fg:w="1"/><text x="1.8754%" y="639.50"></text></g><g><title>main (1 samples, 0.01%)</title><rect x="1.6254%" y="613" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="162" fg:w="1"/><text x="1.8754%" y="623.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.01%)</title><rect x="1.6254%" y="597" width="0.0100%" height="15" fill="rgb(209,103,24)" fg:x="162" fg:w="1"/><text x="1.8754%" y="607.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.01%)</title><rect x="1.6254%" y="581" width="0.0100%" height="15" fill="rgb(229,88,8)" fg:x="162" fg:w="1"/><text x="1.8754%" y="591.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.01%)</title><rect x="1.6254%" y="565" width="0.0100%" height="15" fill="rgb(213,181,19)" fg:x="162" fg:w="1"/><text x="1.8754%" y="575.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.01%)</title><rect x="1.6254%" y="549" width="0.0100%" height="15" fill="rgb(254,191,54)" fg:x="162" fg:w="1"/><text x="1.8754%" y="559.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="1.6254%" y="533" width="0.0100%" height="15" fill="rgb(241,83,37)" fg:x="162" fg:w="1"/><text x="1.8754%" y="543.50"></text></g><g><title>fopen (1 samples, 0.01%)</title><rect x="1.6254%" y="517" width="0.0100%" height="15" fill="rgb(233,36,39)" fg:x="162" fg:w="1"/><text x="1.8754%" y="527.50"></text></g><g><title>[libc-2.32.so] (1 samples, 0.01%)</title><rect x="1.6254%" y="501" width="0.0100%" height="15" fill="rgb(226,3,54)" fg:x="162" fg:w="1"/><text x="1.8754%" y="511.50"></text></g><g><title>[libc-2.32.so] (1 samples, 0.01%)</title><rect x="1.6254%" y="485" width="0.0100%" height="15" fill="rgb(245,192,40)" fg:x="162" fg:w="1"/><text x="1.8754%" y="495.50"></text></g><g><title>_dl_addr (1 samples, 0.01%)</title><rect x="1.6254%" y="469" width="0.0100%" height="15" fill="rgb(238,167,29)" fg:x="162" fg:w="1"/><text x="1.8754%" y="479.50"></text></g><g><title>_xsk_ring_prod__fill_addr (2 samples, 0.02%)</title><rect x="1.6354%" y="645" width="0.0201%" height="15" fill="rgb(232,182,51)" fg:x="163" fg:w="2"/><text x="1.8854%" y="655.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.02%)</title><rect x="1.6555%" y="645" width="0.0201%" height="15" fill="rgb(231,60,39)" fg:x="165" fg:w="2"/><text x="1.9055%" y="655.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.02%)</title><rect x="1.6755%" y="645" width="0.0201%" height="15" fill="rgb(208,69,12)" fg:x="167" fg:w="2"/><text x="1.9255%" y="655.50"></text></g><g><title>ret_from_fork (5 samples, 0.05%)</title><rect x="1.6956%" y="629" width="0.0502%" height="15" fill="rgb(235,93,37)" fg:x="169" fg:w="5"/><text x="1.9456%" y="639.50"></text></g><g><title>schedule_tail (5 samples, 0.05%)</title><rect x="1.6956%" y="613" width="0.0502%" height="15" fill="rgb(213,116,39)" fg:x="169" fg:w="5"/><text x="1.9456%" y="623.50"></text></g><g><title>finish_task_switch (5 samples, 0.05%)</title><rect x="1.6956%" y="597" width="0.0502%" height="15" fill="rgb(222,207,29)" fg:x="169" fg:w="5"/><text x="1.9456%" y="607.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.05%)</title><rect x="1.6956%" y="581" width="0.0502%" height="15" fill="rgb(206,96,30)" fg:x="169" fg:w="5"/><text x="1.9456%" y="591.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.05%)</title><rect x="1.6956%" y="565" width="0.0502%" height="15" fill="rgb(218,138,4)" fg:x="169" fg:w="5"/><text x="1.9456%" y="575.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.05%)</title><rect x="1.6956%" y="549" width="0.0502%" height="15" fill="rgb(250,191,14)" fg:x="169" fg:w="5"/><text x="1.9456%" y="559.50"></text></g><g><title>native_write_msr (5 samples, 0.05%)</title><rect x="1.6956%" y="533" width="0.0502%" height="15" fill="rgb(239,60,40)" fg:x="169" fg:w="5"/><text x="1.9456%" y="543.50"></text></g><g><title>dev_to_dev::build_xsk (1 samples, 0.01%)</title><rect x="1.7458%" y="421" width="0.0100%" height="15" fill="rgb(206,27,48)" fg:x="174" fg:w="1"/><text x="1.9958%" y="431.50"></text></g><g><title>xdpsock::xsk::xsk::Xsk2::new (1 samples, 0.01%)</title><rect x="1.7458%" y="405" width="0.0100%" height="15" fill="rgb(225,35,8)" fg:x="174" fg:w="1"/><text x="1.9958%" y="415.50"></text></g><g><title>xdpsock::umem::umem::UmemBuilderWithMmap::create_umem (1 samples, 0.01%)</title><rect x="1.7458%" y="389" width="0.0100%" height="15" fill="rgb(250,213,24)" fg:x="174" fg:w="1"/><text x="1.9958%" y="399.50"></text></g><g><title>xsk_umem__create_v0_0_4 (1 samples, 0.01%)</title><rect x="1.7458%" y="373" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="174" fg:w="1"/><text x="1.9958%" y="383.50"></text></g><g><title>setsockopt (1 samples, 0.01%)</title><rect x="1.7458%" y="357" width="0.0100%" height="15" fill="rgb(231,138,38)" fg:x="174" fg:w="1"/><text x="1.9958%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="1.7458%" y="341" width="0.0100%" height="15" fill="rgb(231,145,46)" fg:x="174" fg:w="1"/><text x="1.9958%" y="351.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="1.7458%" y="325" width="0.0100%" height="15" fill="rgb(251,118,11)" fg:x="174" fg:w="1"/><text x="1.9958%" y="335.50"></text></g><g><title>__x64_sys_setsockopt (1 samples, 0.01%)</title><rect x="1.7458%" y="309" width="0.0100%" height="15" fill="rgb(217,147,25)" fg:x="174" fg:w="1"/><text x="1.9958%" y="319.50"></text></g><g><title>__sys_setsockopt (1 samples, 0.01%)</title><rect x="1.7458%" y="293" width="0.0100%" height="15" fill="rgb(247,81,37)" fg:x="174" fg:w="1"/><text x="1.9958%" y="303.50"></text></g><g><title>xsk_setsockopt (1 samples, 0.01%)</title><rect x="1.7458%" y="277" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="174" fg:w="1"/><text x="1.9958%" y="287.50"></text></g><g><title>xdp_umem_create (1 samples, 0.01%)</title><rect x="1.7458%" y="261" width="0.0100%" height="15" fill="rgb(227,1,9)" fg:x="174" fg:w="1"/><text x="1.9958%" y="271.50"></text></g><g><title>xdp_umem_reg (1 samples, 0.01%)</title><rect x="1.7458%" y="245" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="174" fg:w="1"/><text x="1.9958%" y="255.50"></text></g><g><title>xdp_umem_pin_pages (1 samples, 0.01%)</title><rect x="1.7458%" y="229" width="0.0100%" height="15" fill="rgb(221,10,30)" fg:x="174" fg:w="1"/><text x="1.9958%" y="239.50"></text></g><g><title>pin_user_pages (1 samples, 0.01%)</title><rect x="1.7458%" y="213" width="0.0100%" height="15" fill="rgb(210,229,1)" fg:x="174" fg:w="1"/><text x="1.9958%" y="223.50"></text></g><g><title>__gup_longterm_locked (1 samples, 0.01%)</title><rect x="1.7458%" y="197" width="0.0100%" height="15" fill="rgb(222,148,37)" fg:x="174" fg:w="1"/><text x="1.9958%" y="207.50"></text></g><g><title>__get_user_pages (1 samples, 0.01%)</title><rect x="1.7458%" y="181" width="0.0100%" height="15" fill="rgb(234,67,33)" fg:x="174" fg:w="1"/><text x="1.9958%" y="191.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="1.7458%" y="165" width="0.0100%" height="15" fill="rgb(247,98,35)" fg:x="174" fg:w="1"/><text x="1.9958%" y="175.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="1.7458%" y="149" width="0.0100%" height="15" fill="rgb(247,138,52)" fg:x="174" fg:w="1"/><text x="1.9958%" y="159.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="1.7458%" y="133" width="0.0100%" height="15" fill="rgb(213,79,30)" fg:x="174" fg:w="1"/><text x="1.9958%" y="143.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="1.7458%" y="117" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="174" fg:w="1"/><text x="1.9958%" y="127.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.01%)</title><rect x="1.7458%" y="101" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="174" fg:w="1"/><text x="1.9958%" y="111.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.01%)</title><rect x="1.7458%" y="85" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="174" fg:w="1"/><text x="1.9958%" y="95.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.01%)</title><rect x="1.7458%" y="69" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="174" fg:w="1"/><text x="1.9958%" y="79.50"></text></g><g><title>prep_new_page (1 samples, 0.01%)</title><rect x="1.7458%" y="53" width="0.0100%" height="15" fill="rgb(251,115,12)" fg:x="174" fg:w="1"/><text x="1.9958%" y="63.50"></text></g><g><title>kernel_init_free_pages (1 samples, 0.01%)</title><rect x="1.7458%" y="37" width="0.0100%" height="15" fill="rgb(240,54,50)" fg:x="174" fg:w="1"/><text x="1.9958%" y="47.50"></text></g><g><title>&lt;&amp;bool as core::ops::bit::Not&gt;::not (2 samples, 0.02%)</title><rect x="2.2875%" y="405" width="0.0201%" height="15" fill="rgb(233,84,52)" fg:x="228" fg:w="2"/><text x="2.5375%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::xsk::xsk::Xsk2&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="405" width="0.0100%" height="15" fill="rgb(207,117,47)" fg:x="230" fg:w="1"/><text x="2.5576%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::xsk::rx::XskRx&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="389" width="0.0100%" height="15" fill="rgb(249,43,39)" fg:x="230" fg:w="1"/><text x="2.5576%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xdpsock::umem::umem::Frame&gt;&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="373" width="0.0100%" height="15" fill="rgb(209,38,44)" fg:x="230" fg:w="1"/><text x="2.5576%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.3076%" y="357" width="0.0100%" height="15" fill="rgb(236,212,23)" fg:x="230" fg:w="1"/><text x="2.5576%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[xdpsock::umem::umem::Frame]&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="341" width="0.0100%" height="15" fill="rgb(242,79,21)" fg:x="230" fg:w="1"/><text x="2.5576%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::umem::umem::Frame&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="325" width="0.0100%" height="15" fill="rgb(211,96,35)" fg:x="230" fg:w="1"/><text x="2.5576%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;xdpsock::umem::mmap::MmapArea&gt;&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="309" width="0.0100%" height="15" fill="rgb(253,215,40)" fg:x="230" fg:w="1"/><text x="2.5576%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.3076%" y="293" width="0.0100%" height="15" fill="rgb(211,81,21)" fg:x="230" fg:w="1"/><text x="2.5576%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.01%)</title><rect x="2.3076%" y="277" width="0.0100%" height="15" fill="rgb(208,190,38)" fg:x="230" fg:w="1"/><text x="2.5576%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::umem::mmap::MmapArea&gt; (1 samples, 0.01%)</title><rect x="2.3076%" y="261" width="0.0100%" height="15" fill="rgb(235,213,38)" fg:x="230" fg:w="1"/><text x="2.5576%" y="271.50"></text></g><g><title>&lt;xdpsock::umem::mmap::MmapArea as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="2.3076%" y="245" width="0.0100%" height="15" fill="rgb(237,122,38)" fg:x="230" fg:w="1"/><text x="2.5576%" y="255.50"></text></g><g><title>__munmap (1 samples, 0.01%)</title><rect x="2.3076%" y="229" width="0.0100%" height="15" fill="rgb(244,218,35)" fg:x="230" fg:w="1"/><text x="2.5576%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.01%)</title><rect x="2.3076%" y="213" width="0.0100%" height="15" fill="rgb(240,68,47)" fg:x="230" fg:w="1"/><text x="2.5576%" y="223.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="2.3076%" y="197" width="0.0100%" height="15" fill="rgb(210,16,53)" fg:x="230" fg:w="1"/><text x="2.5576%" y="207.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.01%)</title><rect x="2.3076%" y="181" width="0.0100%" height="15" fill="rgb(235,124,12)" fg:x="230" fg:w="1"/><text x="2.5576%" y="191.50"></text></g><g><title>__vm_munmap (1 samples, 0.01%)</title><rect x="2.3076%" y="165" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="230" fg:w="1"/><text x="2.5576%" y="175.50"></text></g><g><title>__do_munmap (1 samples, 0.01%)</title><rect x="2.3076%" y="149" width="0.0100%" height="15" fill="rgb(250,166,2)" fg:x="230" fg:w="1"/><text x="2.5576%" y="159.50"></text></g><g><title>unmap_region (1 samples, 0.01%)</title><rect x="2.3076%" y="133" width="0.0100%" height="15" fill="rgb(242,216,29)" fg:x="230" fg:w="1"/><text x="2.5576%" y="143.50"></text></g><g><title>unmap_vmas (1 samples, 0.01%)</title><rect x="2.3076%" y="117" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="230" fg:w="1"/><text x="2.5576%" y="127.50"></text></g><g><title>unmap_single_vma (1 samples, 0.01%)</title><rect x="2.3076%" y="101" width="0.0100%" height="15" fill="rgb(228,99,48)" fg:x="230" fg:w="1"/><text x="2.5576%" y="111.50"></text></g><g><title>unmap_page_range (1 samples, 0.01%)</title><rect x="2.3076%" y="85" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="230" fg:w="1"/><text x="2.5576%" y="95.50"></text></g><g><title>zap_pte_range (1 samples, 0.01%)</title><rect x="2.3076%" y="69" width="0.0100%" height="15" fill="rgb(247,143,39)" fg:x="230" fg:w="1"/><text x="2.5576%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (14 samples, 0.14%)</title><rect x="3.2206%" y="389" width="0.1405%" height="15" fill="rgb(236,97,10)" fg:x="321" fg:w="14"/><text x="3.4706%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (14 samples, 0.14%)</title><rect x="3.2206%" y="373" width="0.1405%" height="15" fill="rgb(233,208,19)" fg:x="321" fg:w="14"/><text x="3.4706%" y="383.50"></text></g><g><title>log::max_level (13 samples, 0.13%)</title><rect x="3.3611%" y="389" width="0.1304%" height="15" fill="rgb(216,164,2)" fg:x="335" fg:w="13"/><text x="3.6111%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.13%)</title><rect x="3.3611%" y="373" width="0.1304%" height="15" fill="rgb(220,129,5)" fg:x="335" fg:w="13"/><text x="3.6111%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.13%)</title><rect x="3.3611%" y="357" width="0.1304%" height="15" fill="rgb(242,17,10)" fg:x="335" fg:w="13"/><text x="3.6111%" y="367.50"></text></g><g><title>[libc-2.32.so] (749 samples, 7.51%)</title><rect x="12.5615%" y="325" width="7.5148%" height="15" fill="rgb(242,107,0)" fg:x="1252" fg:w="749"/><text x="12.8115%" y="335.50">[libc-2.32..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="20.0662%" y="309" width="0.0100%" height="15" fill="rgb(251,28,31)" fg:x="2000" fg:w="1"/><text x="20.3162%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="20.0662%" y="293" width="0.0100%" height="15" fill="rgb(233,223,10)" fg:x="2000" fg:w="1"/><text x="20.3162%" y="303.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="20.0662%" y="277" width="0.0100%" height="15" fill="rgb(215,21,27)" fg:x="2000" fg:w="1"/><text x="20.3162%" y="287.50"></text></g><g><title>do_syscall_64 (33 samples, 0.33%)</title><rect x="20.0763%" y="325" width="0.3311%" height="15" fill="rgb(232,23,21)" fg:x="2001" fg:w="33"/><text x="20.3263%" y="335.50"></text></g><g><title>entry_SYSCALL_64 (939 samples, 9.42%)</title><rect x="20.4073%" y="325" width="9.4211%" height="15" fill="rgb(244,5,23)" fg:x="2034" fg:w="939"/><text x="20.6573%" y="335.50">entry_SYSCALL..</text></g><g><title>__syscall_return_slowpath (23 samples, 0.23%)</title><rect x="32.8183%" y="309" width="0.2308%" height="15" fill="rgb(226,81,46)" fg:x="3271" fg:w="23"/><text x="33.0683%" y="319.50"></text></g><g><title>__x64_sys_poll (107 samples, 1.07%)</title><rect x="33.0491%" y="309" width="1.0735%" height="15" fill="rgb(247,70,30)" fg:x="3294" fg:w="107"/><text x="33.2991%" y="319.50"></text></g><g><title>__x86_indirect_thunk_rax (10 samples, 0.10%)</title><rect x="34.1226%" y="309" width="0.1003%" height="15" fill="rgb(212,68,19)" fg:x="3401" fg:w="10"/><text x="34.3726%" y="319.50"></text></g><g><title>__prepare_exit_to_usermode (9 samples, 0.09%)</title><rect x="35.9486%" y="293" width="0.0903%" height="15" fill="rgb(240,187,13)" fg:x="3583" fg:w="9"/><text x="36.1986%" y="303.50"></text></g><g><title>__prepare_exit_to_usermode (131 samples, 1.31%)</title><rect x="36.9218%" y="277" width="1.3143%" height="15" fill="rgb(223,113,26)" fg:x="3680" fg:w="131"/><text x="37.1718%" y="287.50"></text></g><g><title>fpregs_assert_state_consistent (56 samples, 0.56%)</title><rect x="37.6743%" y="261" width="0.5619%" height="15" fill="rgb(206,192,2)" fg:x="3755" fg:w="56"/><text x="37.9243%" y="271.50"></text></g><g><title>__syscall_return_slowpath (239 samples, 2.40%)</title><rect x="36.0389%" y="293" width="2.3979%" height="15" fill="rgb(241,108,4)" fg:x="3592" fg:w="239"/><text x="36.2889%" y="303.50">__..</text></g><g><title>fpregs_assert_state_consistent (20 samples, 0.20%)</title><rect x="38.2362%" y="277" width="0.2007%" height="15" fill="rgb(247,173,49)" fg:x="3811" fg:w="20"/><text x="38.4862%" y="287.50"></text></g><g><title>__check_object_size (23 samples, 0.23%)</title><rect x="41.3765%" y="277" width="0.2308%" height="15" fill="rgb(224,114,35)" fg:x="4124" fg:w="23"/><text x="41.6265%" y="287.50"></text></g><g><title>_copy_from_user (14 samples, 0.14%)</title><rect x="41.6073%" y="277" width="0.1405%" height="15" fill="rgb(245,159,27)" fg:x="4147" fg:w="14"/><text x="41.8573%" y="287.50"></text></g><g><title>do_poll.constprop.0 (16 samples, 0.16%)</title><rect x="41.7478%" y="277" width="0.1605%" height="15" fill="rgb(245,172,44)" fg:x="4161" fg:w="16"/><text x="41.9978%" y="287.50"></text></g><g><title>__check_object_size (30 samples, 0.30%)</title><rect x="52.6136%" y="261" width="0.3010%" height="15" fill="rgb(236,23,11)" fg:x="5244" fg:w="30"/><text x="52.8636%" y="271.50"></text></g><g><title>__check_object_size.part.0 (14 samples, 0.14%)</title><rect x="52.9146%" y="261" width="0.1405%" height="15" fill="rgb(205,117,38)" fg:x="5274" fg:w="14"/><text x="53.1646%" y="271.50"></text></g><g><title>__check_object_size.part.0 (129 samples, 1.29%)</title><rect x="53.0551%" y="245" width="1.2943%" height="15" fill="rgb(237,72,25)" fg:x="5288" fg:w="129"/><text x="53.3051%" y="255.50"></text></g><g><title>check_stack_object (64 samples, 0.64%)</title><rect x="53.7072%" y="229" width="0.6421%" height="15" fill="rgb(244,70,9)" fg:x="5353" fg:w="64"/><text x="53.9572%" y="239.50"></text></g><g><title>__check_object_size (165 samples, 1.66%)</title><rect x="53.0551%" y="261" width="1.6555%" height="15" fill="rgb(217,125,39)" fg:x="5288" fg:w="165"/><text x="53.3051%" y="271.50"></text></g><g><title>check_stack_object (36 samples, 0.36%)</title><rect x="54.3494%" y="245" width="0.3612%" height="15" fill="rgb(235,36,10)" fg:x="5417" fg:w="36"/><text x="54.5994%" y="255.50"></text></g><g><title>__fdget (11 samples, 0.11%)</title><rect x="54.7105%" y="261" width="0.1104%" height="15" fill="rgb(251,123,47)" fg:x="5453" fg:w="11"/><text x="54.9605%" y="271.50"></text></g><g><title>_copy_from_user (161 samples, 1.62%)</title><rect x="54.8209%" y="261" width="1.6153%" height="15" fill="rgb(221,13,13)" fg:x="5464" fg:w="161"/><text x="55.0709%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="56.4362%" y="261" width="0.0100%" height="15" fill="rgb(238,131,9)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="56.4362%" y="245" width="0.0100%" height="15" fill="rgb(211,50,8)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="255.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.01%)</title><rect x="56.4362%" y="229" width="0.0100%" height="15" fill="rgb(245,182,24)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="239.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.01%)</title><rect x="56.4362%" y="213" width="0.0100%" height="15" fill="rgb(242,14,37)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="223.50"></text></g><g><title>asm_call_sysvec_on_stack (1 samples, 0.01%)</title><rect x="56.4362%" y="197" width="0.0100%" height="15" fill="rgb(246,228,12)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="207.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.01%)</title><rect x="56.4362%" y="181" width="0.0100%" height="15" fill="rgb(213,55,15)" fg:x="5625" fg:w="1"/><text x="56.6862%" y="191.50"></text></g><g><title>copy_user_enhanced_fast_string (201 samples, 2.02%)</title><rect x="56.4463%" y="261" width="2.0167%" height="15" fill="rgb(209,9,3)" fg:x="5626" fg:w="201"/><text x="56.6963%" y="271.50">c..</text></g><g><title>copy_user_generic_unrolled (335 samples, 3.36%)</title><rect x="58.4629%" y="261" width="3.3611%" height="15" fill="rgb(230,59,30)" fg:x="5827" fg:w="335"/><text x="58.7129%" y="271.50">cop..</text></g><g><title>__fget_files (14 samples, 0.14%)</title><rect x="67.5429%" y="229" width="0.1405%" height="15" fill="rgb(209,121,21)" fg:x="6732" fg:w="14"/><text x="67.7929%" y="239.50"></text></g><g><title>__fdget (560 samples, 5.62%)</title><rect x="67.4024%" y="245" width="5.6185%" height="15" fill="rgb(220,109,13)" fg:x="6718" fg:w="560"/><text x="67.6524%" y="255.50">__fdget</text></g><g><title>__fget_light (532 samples, 5.34%)</title><rect x="67.6834%" y="229" width="5.3376%" height="15" fill="rgb(232,18,1)" fg:x="6746" fg:w="532"/><text x="67.9334%" y="239.50">__fget_..</text></g><g><title>__fget_files (517 samples, 5.19%)</title><rect x="67.8339%" y="213" width="5.1871%" height="15" fill="rgb(215,41,42)" fg:x="6761" fg:w="517"/><text x="68.0839%" y="223.50">__fget..</text></g><g><title>__fget_light (48 samples, 0.48%)</title><rect x="73.0210%" y="245" width="0.4816%" height="15" fill="rgb(224,123,36)" fg:x="7278" fg:w="48"/><text x="73.2710%" y="255.50"></text></g><g><title>__x86_indirect_thunk_rcx (4 samples, 0.04%)</title><rect x="73.5026%" y="245" width="0.0401%" height="15" fill="rgb(240,125,3)" fg:x="7326" fg:w="4"/><text x="73.7526%" y="255.50"></text></g><g><title>fput (19 samples, 0.19%)</title><rect x="73.5427%" y="245" width="0.1906%" height="15" fill="rgb(205,98,50)" fg:x="7330" fg:w="19"/><text x="73.7927%" y="255.50"></text></g><g><title>fput_many (316 samples, 3.17%)</title><rect x="73.7333%" y="245" width="3.1705%" height="15" fill="rgb(205,185,37)" fg:x="7349" fg:w="316"/><text x="73.9833%" y="255.50">fpu..</text></g><g><title>datagram_poll (29 samples, 0.29%)</title><rect x="78.2884%" y="229" width="0.2910%" height="15" fill="rgb(238,207,15)" fg:x="7803" fg:w="29"/><text x="78.5384%" y="239.50"></text></g><g><title>sock_poll (517 samples, 5.19%)</title><rect x="76.9038%" y="245" width="5.1871%" height="15" fill="rgb(213,199,42)" fg:x="7665" fg:w="517"/><text x="77.1538%" y="255.50">sock_p..</text></g><g><title>xsk_poll (350 samples, 3.51%)</title><rect x="78.5793%" y="229" width="3.5116%" height="15" fill="rgb(235,201,11)" fg:x="7832" fg:w="350"/><text x="78.8293%" y="239.50">xsk..</text></g><g><title>datagram_poll (147 samples, 1.47%)</title><rect x="80.6160%" y="213" width="1.4749%" height="15" fill="rgb(207,46,11)" fg:x="8035" fg:w="147"/><text x="80.8660%" y="223.50"></text></g><g><title>do_poll.constprop.0 (2,194 samples, 22.01%)</title><rect x="61.8240%" y="261" width="22.0126%" height="15" fill="rgb(241,35,35)" fg:x="6162" fg:w="2194"/><text x="62.0740%" y="271.50">do_poll.constprop.0</text></g><g><title>xsk_poll (174 samples, 1.75%)</title><rect x="82.0909%" y="245" width="1.7458%" height="15" fill="rgb(243,32,47)" fg:x="8182" fg:w="174"/><text x="82.3409%" y="255.50"></text></g><g><title>fput (28 samples, 0.28%)</title><rect x="83.8367%" y="261" width="0.2809%" height="15" fill="rgb(247,202,23)" fg:x="8356" fg:w="28"/><text x="84.0867%" y="271.50"></text></g><g><title>poll_freewait (65 samples, 0.65%)</title><rect x="84.1176%" y="261" width="0.6522%" height="15" fill="rgb(219,102,11)" fg:x="8384" fg:w="65"/><text x="84.3676%" y="271.50"></text></g><g><title>do_sys_poll (4,323 samples, 43.37%)</title><rect x="41.9083%" y="277" width="43.3731%" height="15" fill="rgb(243,110,44)" fg:x="4177" fg:w="4323"/><text x="42.1583%" y="287.50">do_sys_poll</text></g><g><title>sock_poll (51 samples, 0.51%)</title><rect x="84.7697%" y="261" width="0.5117%" height="15" fill="rgb(222,74,54)" fg:x="8449" fg:w="51"/><text x="85.0197%" y="271.50"></text></g><g><title>poll_freewait (13 samples, 0.13%)</title><rect x="85.2814%" y="277" width="0.1304%" height="15" fill="rgb(216,99,12)" fg:x="8500" fg:w="13"/><text x="85.5314%" y="287.50"></text></g><g><title>__x64_sys_poll (4,754 samples, 47.70%)</title><rect x="38.4368%" y="293" width="47.6974%" height="15" fill="rgb(226,22,26)" fg:x="3831" fg:w="4754"/><text x="38.6868%" y="303.50">__x64_sys_poll</text></g><g><title>poll_select_set_timeout (72 samples, 0.72%)</title><rect x="85.4119%" y="277" width="0.7224%" height="15" fill="rgb(217,163,10)" fg:x="8513" fg:w="72"/><text x="85.6619%" y="287.50"></text></g><g><title>do_sys_poll (9 samples, 0.09%)</title><rect x="86.1342%" y="293" width="0.0903%" height="15" fill="rgb(213,25,53)" fg:x="8585" fg:w="9"/><text x="86.3842%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5,650 samples, 56.69%)</title><rect x="29.8284%" y="325" width="56.6871%" height="15" fill="rgb(252,105,26)" fg:x="2973" fg:w="5650"/><text x="30.0784%" y="335.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (5,212 samples, 52.29%)</title><rect x="34.2229%" y="309" width="52.2926%" height="15" fill="rgb(220,39,43)" fg:x="3411" fg:w="5212"/><text x="34.4729%" y="319.50">do_syscall_64</text></g><g><title>poll_select_set_timeout (29 samples, 0.29%)</title><rect x="86.2245%" y="293" width="0.2910%" height="15" fill="rgb(229,68,48)" fg:x="8594" fg:w="29"/><text x="86.4745%" y="303.50"></text></g><g><title>xdpsock::socket::poll::poll_read (8,508 samples, 85.36%)</title><rect x="3.6721%" y="373" width="85.3617%" height="15" fill="rgb(252,8,32)" fg:x="366" fg:w="8508"/><text x="3.9221%" y="383.50">xdpsock::socket::poll::poll_read</text></g><g><title>xdpsock::socket::poll::poll (8,508 samples, 85.36%)</title><rect x="3.6721%" y="357" width="85.3617%" height="15" fill="rgb(223,20,43)" fg:x="366" fg:w="8508"/><text x="3.9221%" y="367.50">xdpsock::socket::poll::poll</text></g><g><title>__poll (8,495 samples, 85.23%)</title><rect x="3.8025%" y="341" width="85.2313%" height="15" fill="rgb(229,81,49)" fg:x="379" fg:w="8495"/><text x="4.0525%" y="351.50">__poll</text></g><g><title>syscall_return_via_sysret (251 samples, 2.52%)</title><rect x="86.5155%" y="325" width="2.5183%" height="15" fill="rgb(236,28,36)" fg:x="8623" fg:w="251"/><text x="86.7655%" y="335.50">sy..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::convert::AsMut&lt;T&gt;&gt;::as_mut (1 samples, 0.01%)</title><rect x="89.0840%" y="357" width="0.0100%" height="15" fill="rgb(249,185,26)" fg:x="8879" fg:w="1"/><text x="89.3340%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="89.0940%" y="357" width="0.0301%" height="15" fill="rgb(249,174,33)" fg:x="8880" fg:w="3"/><text x="89.3440%" y="367.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="89.1040%" y="341" width="0.0201%" height="15" fill="rgb(233,201,37)" fg:x="8881" fg:w="2"/><text x="89.3540%" y="351.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.01%)</title><rect x="89.1141%" y="325" width="0.0100%" height="15" fill="rgb(221,78,26)" fg:x="8882" fg:w="1"/><text x="89.3641%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.01%)</title><rect x="89.1141%" y="309" width="0.0100%" height="15" fill="rgb(250,127,30)" fg:x="8882" fg:w="1"/><text x="89.3641%" y="319.50"></text></g><g><title>xdpsock::socket::socket::RxQueue::poll_and_consume (8,538 samples, 85.66%)</title><rect x="3.4915%" y="389" width="85.6627%" height="15" fill="rgb(230,49,44)" fg:x="348" fg:w="8538"/><text x="3.7415%" y="399.50">xdpsock::socket::socket::RxQueue::poll_and_consume</text></g><g><title>xdpsock::socket::socket::RxQueue::consume (12 samples, 0.12%)</title><rect x="89.0338%" y="373" width="0.1204%" height="15" fill="rgb(229,67,23)" fg:x="8874" fg:w="12"/><text x="89.2838%" y="383.50"></text></g><g><title>_xsk_ring_cons__rx_desc (3 samples, 0.03%)</title><rect x="89.1241%" y="357" width="0.0301%" height="15" fill="rgb(249,83,47)" fg:x="8883" fg:w="3"/><text x="89.3741%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::convert::AsRef&lt;T&gt;&gt;::as_ref (67 samples, 0.67%)</title><rect x="89.1542%" y="373" width="0.6722%" height="15" fill="rgb(215,43,3)" fg:x="8886" fg:w="67"/><text x="89.4042%" y="383.50"></text></g><g><title>xdpsock::umem::umem::FillQueue::needs_wakeup (203 samples, 2.04%)</title><rect x="89.1542%" y="389" width="2.0367%" height="15" fill="rgb(238,154,13)" fg:x="8886" fg:w="203"/><text x="89.4042%" y="399.50">x..</text></g><g><title>_xsk_ring_prod__needs_wakeup (136 samples, 1.36%)</title><rect x="89.8264%" y="373" width="1.3645%" height="15" fill="rgb(219,56,2)" fg:x="8953" fg:w="136"/><text x="90.0764%" y="383.50"></text></g><g><title>xsk_ring_prod__needs_wakeup (18 samples, 0.18%)</title><rect x="91.0103%" y="357" width="0.1806%" height="15" fill="rgb(233,0,4)" fg:x="9071" fg:w="18"/><text x="91.2603%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.06%)</title><rect x="91.4217%" y="373" width="0.0602%" height="15" fill="rgb(235,30,7)" fg:x="9112" fg:w="6"/><text x="91.6717%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.06%)</title><rect x="91.4217%" y="357" width="0.0602%" height="15" fill="rgb(250,79,13)" fg:x="9112" fg:w="6"/><text x="91.6717%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.06%)</title><rect x="91.4217%" y="341" width="0.0602%" height="15" fill="rgb(211,146,34)" fg:x="9112" fg:w="6"/><text x="91.6717%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="91.4819%" y="373" width="0.0100%" height="15" fill="rgb(228,22,38)" fg:x="9118" fg:w="1"/><text x="91.7319%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="91.4819%" y="357" width="0.0100%" height="15" fill="rgb(235,168,5)" fg:x="9118" fg:w="1"/><text x="91.7319%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="91.4819%" y="341" width="0.0100%" height="15" fill="rgb(221,155,16)" fg:x="9118" fg:w="1"/><text x="91.7319%" y="351.50"></text></g><g><title>&lt;xdpsock::umem::umem::Frame as core::clone::Clone&gt;::clone (37 samples, 0.37%)</title><rect x="91.4919%" y="373" width="0.3712%" height="15" fill="rgb(215,215,53)" fg:x="9119" fg:w="37"/><text x="91.7419%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (33 samples, 0.33%)</title><rect x="91.5321%" y="357" width="0.3311%" height="15" fill="rgb(223,4,10)" fg:x="9123" fg:w="33"/><text x="91.7821%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.33%)</title><rect x="91.5321%" y="341" width="0.3311%" height="15" fill="rgb(234,103,6)" fg:x="9123" fg:w="33"/><text x="91.7821%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.33%)</title><rect x="91.5321%" y="325" width="0.3311%" height="15" fill="rgb(227,97,0)" fg:x="9123" fg:w="33"/><text x="91.7821%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (28 samples, 0.28%)</title><rect x="91.8631%" y="373" width="0.2809%" height="15" fill="rgb(234,150,53)" fg:x="9156" fg:w="28"/><text x="92.1131%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::truncate (28 samples, 0.28%)</title><rect x="91.8631%" y="357" width="0.2809%" height="15" fill="rgb(228,201,54)" fg:x="9156" fg:w="28"/><text x="92.1131%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[xdpsock::umem::umem::Frame]&gt; (28 samples, 0.28%)</title><rect x="91.8631%" y="341" width="0.2809%" height="15" fill="rgb(222,22,37)" fg:x="9156" fg:w="28"/><text x="92.1131%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::umem::umem::Frame&gt; (27 samples, 0.27%)</title><rect x="91.8732%" y="325" width="0.2709%" height="15" fill="rgb(237,53,32)" fg:x="9157" fg:w="27"/><text x="92.1232%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;xdpsock::umem::mmap::MmapArea&gt;&gt; (27 samples, 0.27%)</title><rect x="91.8732%" y="309" width="0.2709%" height="15" fill="rgb(233,25,53)" fg:x="9157" fg:w="27"/><text x="92.1232%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.27%)</title><rect x="91.8732%" y="293" width="0.2709%" height="15" fill="rgb(210,40,34)" fg:x="9157" fg:w="27"/><text x="92.1232%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (27 samples, 0.27%)</title><rect x="91.8732%" y="277" width="0.2709%" height="15" fill="rgb(241,220,44)" fg:x="9157" fg:w="27"/><text x="92.1232%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_sub (27 samples, 0.27%)</title><rect x="91.8732%" y="261" width="0.2709%" height="15" fill="rgb(235,28,35)" fg:x="9157" fg:w="27"/><text x="92.1232%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.36%)</title><rect x="92.1441%" y="373" width="0.3612%" height="15" fill="rgb(210,56,17)" fg:x="9184" fg:w="36"/><text x="92.3941%" y="383.50"></text></g><g><title>core::ptr::write (34 samples, 0.34%)</title><rect x="92.1641%" y="357" width="0.3411%" height="15" fill="rgb(224,130,29)" fg:x="9186" fg:w="34"/><text x="92.4141%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="92.5253%" y="357" width="0.0100%" height="15" fill="rgb(235,212,8)" fg:x="9222" fg:w="1"/><text x="92.7753%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="92.5253%" y="341" width="0.0100%" height="15" fill="rgb(223,33,50)" fg:x="9222" fg:w="1"/><text x="92.7753%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="92.5253%" y="325" width="0.0100%" height="15" fill="rgb(219,149,13)" fg:x="9222" fg:w="1"/><text x="92.7753%" y="335.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u64 (2 samples, 0.02%)</title><rect x="92.5354%" y="357" width="0.0201%" height="15" fill="rgb(250,156,29)" fg:x="9223" fg:w="2"/><text x="92.7854%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (2 samples, 0.02%)</title><rect x="92.5354%" y="341" width="0.0201%" height="15" fill="rgb(216,193,19)" fg:x="9223" fg:w="2"/><text x="92.7854%" y="351.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (2 samples, 0.02%)</title><rect x="92.5354%" y="325" width="0.0201%" height="15" fill="rgb(216,135,14)" fg:x="9223" fg:w="2"/><text x="92.7854%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.02%)</title><rect x="92.5354%" y="309" width="0.0201%" height="15" fill="rgb(241,47,5)" fg:x="9223" fg:w="2"/><text x="92.7854%" y="319.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (2 samples, 0.02%)</title><rect x="92.5354%" y="293" width="0.0201%" height="15" fill="rgb(233,42,35)" fg:x="9223" fg:w="2"/><text x="92.7854%" y="303.50"></text></g><g><title>[libc-2.32.so] (56 samples, 0.56%)</title><rect x="92.5554%" y="357" width="0.5619%" height="15" fill="rgb(231,13,6)" fg:x="9225" fg:w="56"/><text x="92.8054%" y="367.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="93.1073%" y="341" width="0.0100%" height="15" fill="rgb(207,181,40)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="93.1073%" y="325" width="0.0100%" height="15" fill="rgb(254,173,49)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.01%)</title><rect x="93.1073%" y="309" width="0.0100%" height="15" fill="rgb(221,1,38)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="319.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.01%)</title><rect x="93.1073%" y="293" width="0.0100%" height="15" fill="rgb(206,124,46)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="303.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.01%)</title><rect x="93.1073%" y="277" width="0.0100%" height="15" fill="rgb(249,21,11)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="287.50"></text></g><g><title>__run_hrtimer (1 samples, 0.01%)</title><rect x="93.1073%" y="261" width="0.0100%" height="15" fill="rgb(222,201,40)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="271.50"></text></g><g><title>tick_sched_timer (1 samples, 0.01%)</title><rect x="93.1073%" y="245" width="0.0100%" height="15" fill="rgb(235,61,29)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.01%)</title><rect x="93.1073%" y="229" width="0.0100%" height="15" fill="rgb(219,207,3)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.01%)</title><rect x="93.1073%" y="213" width="0.0100%" height="15" fill="rgb(222,56,46)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="223.50"></text></g><g><title>account_process_tick (1 samples, 0.01%)</title><rect x="93.1073%" y="197" width="0.0100%" height="15" fill="rgb(239,76,54)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="207.50"></text></g><g><title>account_user_time (1 samples, 0.01%)</title><rect x="93.1073%" y="181" width="0.0100%" height="15" fill="rgb(231,124,27)" fg:x="9280" fg:w="1"/><text x="93.3573%" y="191.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="93.1173%" y="357" width="0.0100%" height="15" fill="rgb(249,195,6)" fg:x="9281" fg:w="1"/><text x="93.3673%" y="367.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="93.1173%" y="341" width="0.0100%" height="15" fill="rgb(237,174,47)" fg:x="9281" fg:w="1"/><text x="93.3673%" y="351.50"></text></g><g><title>core::array::&lt;impl core::cmp::PartialEq&lt;[A: N]&gt; for &amp;[B]&gt;::eq (2 samples, 0.02%)</title><rect x="93.2277%" y="341" width="0.0201%" height="15" fill="rgb(206,201,31)" fg:x="9292" fg:w="2"/><text x="93.4777%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="93.2277%" y="325" width="0.0201%" height="15" fill="rgb(231,57,52)" fg:x="9292" fg:w="2"/><text x="93.4777%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="93.2277%" y="309" width="0.0201%" height="15" fill="rgb(248,177,22)" fg:x="9292" fg:w="2"/><text x="93.4777%" y="319.50"></text></g><g><title>etherparse::internet::ipv4::Ipv4HeaderSlice::destination (2 samples, 0.02%)</title><rect x="93.2477%" y="341" width="0.0201%" height="15" fill="rgb(215,211,37)" fg:x="9294" fg:w="2"/><text x="93.4977%" y="351.50"></text></g><g><title>etherparse::internet::ipv4::Ipv4HeaderSlice::source (1 samples, 0.01%)</title><rect x="93.2678%" y="341" width="0.0100%" height="15" fill="rgb(241,128,51)" fg:x="9296" fg:w="1"/><text x="93.5178%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.01%)</title><rect x="93.2678%" y="325" width="0.0100%" height="15" fill="rgb(227,165,31)" fg:x="9296" fg:w="1"/><text x="93.5178%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.01%)</title><rect x="93.2678%" y="309" width="0.0100%" height="15" fill="rgb(228,167,24)" fg:x="9296" fg:w="1"/><text x="93.5178%" y="319.50"></text></g><g><title>dev_to_dev::filter_pkt (16 samples, 0.16%)</title><rect x="93.1273%" y="357" width="0.1605%" height="15" fill="rgb(228,143,12)" fg:x="9282" fg:w="16"/><text x="93.3773%" y="367.50"></text></g><g><title>etherparse::transport::udp::UdpHeaderSlice::destination_port (1 samples, 0.01%)</title><rect x="93.2778%" y="341" width="0.0100%" height="15" fill="rgb(249,149,8)" fg:x="9297" fg:w="1"/><text x="93.5278%" y="351.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u16 (1 samples, 0.01%)</title><rect x="93.2778%" y="325" width="0.0100%" height="15" fill="rgb(243,35,44)" fg:x="9297" fg:w="1"/><text x="93.5278%" y="335.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (1 samples, 0.01%)</title><rect x="93.2778%" y="309" width="0.0100%" height="15" fill="rgb(246,89,9)" fg:x="9297" fg:w="1"/><text x="93.5278%" y="319.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (1 samples, 0.01%)</title><rect x="93.2778%" y="293" width="0.0100%" height="15" fill="rgb(233,213,13)" fg:x="9297" fg:w="1"/><text x="93.5278%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (1 samples, 0.01%)</title><rect x="93.2778%" y="277" width="0.0100%" height="15" fill="rgb(233,141,41)" fg:x="9297" fg:w="1"/><text x="93.5278%" y="287.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.01%)</title><rect x="93.2878%" y="357" width="0.0100%" height="15" fill="rgb(239,167,4)" fg:x="9298" fg:w="1"/><text x="93.5378%" y="367.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (292 samples, 2.93%)</title><rect x="93.4383%" y="293" width="2.9297%" height="15" fill="rgb(209,217,16)" fg:x="9313" fg:w="292"/><text x="93.6883%" y="303.50">&lt;T..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (292 samples, 2.93%)</title><rect x="93.4383%" y="277" width="2.9297%" height="15" fill="rgb(219,88,35)" fg:x="9313" fg:w="292"/><text x="93.6883%" y="287.50">co..</text></g><g><title>core::result::Result&lt;T,E&gt;::map (292 samples, 2.93%)</title><rect x="93.4383%" y="261" width="2.9297%" height="15" fill="rgb(220,193,23)" fg:x="9313" fg:w="292"/><text x="93.6883%" y="271.50">co..</text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (292 samples, 2.93%)</title><rect x="93.4383%" y="245" width="2.9297%" height="15" fill="rgb(230,90,52)" fg:x="9313" fg:w="292"/><text x="93.6883%" y="255.50">co..</text></g><g><title>etherparse::link::ethernet::Ethernet2HeaderSlice::ether_type (293 samples, 2.94%)</title><rect x="93.4383%" y="325" width="2.9397%" height="15" fill="rgb(252,106,19)" fg:x="9313" fg:w="293"/><text x="93.6883%" y="335.50">et..</text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u16 (293 samples, 2.94%)</title><rect x="93.4383%" y="309" width="2.9397%" height="15" fill="rgb(206,74,20)" fg:x="9313" fg:w="293"/><text x="93.6883%" y="319.50">&lt;b..</text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (1 samples, 0.01%)</title><rect x="96.3680%" y="293" width="0.0100%" height="15" fill="rgb(230,138,44)" fg:x="9605" fg:w="1"/><text x="96.6180%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (1 samples, 0.01%)</title><rect x="96.3680%" y="277" width="0.0100%" height="15" fill="rgb(235,182,43)" fg:x="9605" fg:w="1"/><text x="96.6180%" y="287.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (1 samples, 0.01%)</title><rect x="96.3680%" y="261" width="0.0100%" height="15" fill="rgb(242,16,51)" fg:x="9605" fg:w="1"/><text x="96.6180%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.01%)</title><rect x="96.5386%" y="277" width="0.0100%" height="15" fill="rgb(248,9,4)" fg:x="9622" fg:w="1"/><text x="96.7886%" y="287.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.01%)</title><rect x="96.5386%" y="261" width="0.0100%" height="15" fill="rgb(210,31,22)" fg:x="9622" fg:w="1"/><text x="96.7886%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.01%)</title><rect x="96.5386%" y="245" width="0.0100%" height="15" fill="rgb(239,54,39)" fg:x="9622" fg:w="1"/><text x="96.7886%" y="255.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.01%)</title><rect x="96.5386%" y="229" width="0.0100%" height="15" fill="rgb(230,99,41)" fg:x="9622" fg:w="1"/><text x="96.7886%" y="239.50"></text></g><g><title>etherparse::internet::ipv4::Ipv4HeaderSlice::from_slice (13 samples, 0.13%)</title><rect x="96.4382%" y="309" width="0.1304%" height="15" fill="rgb(253,106,12)" fg:x="9612" fg:w="13"/><text x="96.6882%" y="319.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u16 (3 samples, 0.03%)</title><rect x="96.5386%" y="293" width="0.0301%" height="15" fill="rgb(213,46,41)" fg:x="9622" fg:w="3"/><text x="96.7886%" y="303.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (2 samples, 0.02%)</title><rect x="96.5486%" y="277" width="0.0201%" height="15" fill="rgb(215,133,35)" fg:x="9623" fg:w="2"/><text x="96.7986%" y="287.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (2 samples, 0.02%)</title><rect x="96.5486%" y="261" width="0.0201%" height="15" fill="rgb(213,28,5)" fg:x="9623" fg:w="2"/><text x="96.7986%" y="271.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (2 samples, 0.02%)</title><rect x="96.5486%" y="245" width="0.0201%" height="15" fill="rgb(215,77,49)" fg:x="9623" fg:w="2"/><text x="96.7986%" y="255.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::move_by_slice (2 samples, 0.02%)</title><rect x="96.5687%" y="309" width="0.0201%" height="15" fill="rgb(248,100,22)" fg:x="9625" fg:w="2"/><text x="96.8187%" y="319.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::move_by_slice (2 samples, 0.02%)</title><rect x="96.5887%" y="293" width="0.0201%" height="15" fill="rgb(208,67,9)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="96.5887%" y="277" width="0.0201%" height="15" fill="rgb(219,133,21)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="96.5887%" y="261" width="0.0201%" height="15" fill="rgb(246,46,29)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="271.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="96.5887%" y="245" width="0.0201%" height="15" fill="rgb(246,185,52)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="96.5887%" y="229" width="0.0201%" height="15" fill="rgb(252,136,11)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="96.5887%" y="213" width="0.0201%" height="15" fill="rgb(219,138,53)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.02%)</title><rect x="96.5887%" y="197" width="0.0201%" height="15" fill="rgb(211,51,23)" fg:x="9627" fg:w="2"/><text x="96.8387%" y="207.50"></text></g><g><title>dev_to_dev::rx_pkts::{{closure}} (466 samples, 4.68%)</title><rect x="92.5053%" y="373" width="4.6754%" height="15" fill="rgb(247,221,28)" fg:x="9220" fg:w="466"/><text x="92.7553%" y="383.50">dev_t..</text></g><g><title>etherparse::packet_slicing::SlicedPacket::from_ethernet (387 samples, 3.88%)</title><rect x="93.2979%" y="357" width="3.8828%" height="15" fill="rgb(251,222,45)" fg:x="9299" fg:w="387"/><text x="93.5479%" y="367.50">ethe..</text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_ethernet2 (387 samples, 3.88%)</title><rect x="93.2979%" y="341" width="3.8828%" height="15" fill="rgb(217,162,53)" fg:x="9299" fg:w="387"/><text x="93.5479%" y="351.50">ethe..</text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_ipv4 (80 samples, 0.80%)</title><rect x="96.3780%" y="325" width="0.8026%" height="15" fill="rgb(229,93,14)" fg:x="9606" fg:w="80"/><text x="96.6280%" y="335.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_udp (59 samples, 0.59%)</title><rect x="96.5887%" y="309" width="0.5920%" height="15" fill="rgb(209,67,49)" fg:x="9627" fg:w="59"/><text x="96.8387%" y="319.50"></text></g><g><title>etherparse::packet_slicing::CursorSlice::slice_payload (57 samples, 0.57%)</title><rect x="96.6088%" y="293" width="0.5719%" height="15" fill="rgb(213,87,29)" fg:x="9629" fg:w="57"/><text x="96.8588%" y="303.50"></text></g><g><title>[libc-2.32.so] (54 samples, 0.54%)</title><rect x="96.6389%" y="277" width="0.5418%" height="15" fill="rgb(205,151,52)" fg:x="9632" fg:w="54"/><text x="96.8889%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="97.2610%" y="341" width="0.0100%" height="15" fill="rgb(253,215,39)" fg:x="9694" fg:w="1"/><text x="97.5110%" y="351.50"></text></g><g><title>_xsk_ring_prod__fill_addr (1 samples, 0.01%)</title><rect x="97.2710%" y="341" width="0.0100%" height="15" fill="rgb(221,220,41)" fg:x="9695" fg:w="1"/><text x="97.5210%" y="351.50"></text></g><g><title>_xsk_ring_prod__reserve (1 samples, 0.01%)</title><rect x="97.2810%" y="341" width="0.0100%" height="15" fill="rgb(218,133,21)" fg:x="9696" fg:w="1"/><text x="97.5310%" y="351.50"></text></g><g><title>xsk_ring_prod__reserve (1 samples, 0.01%)</title><rect x="97.2810%" y="325" width="0.0100%" height="15" fill="rgb(221,193,43)" fg:x="9696" fg:w="1"/><text x="97.5310%" y="335.50"></text></g><g><title>xdpsock::umem::umem::FillQueue::produce_and_wakeup (12 samples, 0.12%)</title><rect x="97.1807%" y="373" width="0.1204%" height="15" fill="rgb(240,128,52)" fg:x="9686" fg:w="12"/><text x="97.4307%" y="383.50"></text></g><g><title>xdpsock::umem::umem::FillQueue::produce (12 samples, 0.12%)</title><rect x="97.1807%" y="357" width="0.1204%" height="15" fill="rgb(253,114,12)" fg:x="9686" fg:w="12"/><text x="97.4307%" y="367.50"></text></g><g><title>_xsk_ring_prod__submit (1 samples, 0.01%)</title><rect x="97.2911%" y="341" width="0.0100%" height="15" fill="rgb(215,223,47)" fg:x="9697" fg:w="1"/><text x="97.5411%" y="351.50"></text></g><g><title>xsk_ring_prod__submit (1 samples, 0.01%)</title><rect x="97.2911%" y="325" width="0.0100%" height="15" fill="rgb(248,225,23)" fg:x="9697" fg:w="1"/><text x="97.5411%" y="335.50"></text></g><g><title>std::panic::catch_unwind (9,525 samples, 95.57%)</title><rect x="1.7458%" y="533" width="95.5654%" height="15" fill="rgb(250,108,0)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,525 samples, 95.57%)</title><rect x="1.7458%" y="517" width="95.5654%" height="15" fill="rgb(228,208,7)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,525 samples, 95.57%)</title><rect x="1.7458%" y="501" width="95.5654%" height="15" fill="rgb(244,45,10)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,525 samples, 95.57%)</title><rect x="1.7458%" y="485" width="95.5654%" height="15" fill="rgb(207,125,25)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="495.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (9,525 samples, 95.57%)</title><rect x="1.7458%" y="469" width="95.5654%" height="15" fill="rgb(210,195,18)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="479.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,525 samples, 95.57%)</title><rect x="1.7458%" y="453" width="95.5654%" height="15" fill="rgb(249,80,12)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dev_to_dev::spawn_threads::{{closure}} (9,525 samples, 95.57%)</title><rect x="1.7458%" y="437" width="95.5654%" height="15" fill="rgb(221,65,9)" fg:x="174" fg:w="9525"/><text x="1.9958%" y="447.50">dev_to_dev::spawn_threads::{{closure}}</text></g><g><title>dev_to_dev::rx_pkts (9,524 samples, 95.56%)</title><rect x="1.7558%" y="421" width="95.5553%" height="15" fill="rgb(235,49,36)" fg:x="175" fg:w="9524"/><text x="2.0058%" y="431.50">dev_to_dev::rx_pkts</text></g><g><title>xdpsock::xsk::rx::XskRx::recv_apply (9,468 samples, 94.99%)</title><rect x="2.3176%" y="405" width="94.9935%" height="15" fill="rgb(225,32,20)" fg:x="231" fg:w="9468"/><text x="2.5676%" y="415.50">xdpsock::xsk::rx::XskRx::recv_apply</text></g><g><title>xdpsock::xsk::rx::XskRx::apply_batch (610 samples, 6.12%)</title><rect x="91.1909%" y="389" width="6.1202%" height="15" fill="rgb(215,141,46)" fg:x="9089" fg:w="610"/><text x="91.4409%" y="399.50">xdpsock:..</text></g><g><title>xdpsock::umem::umem::Frame::set_addr (1 samples, 0.01%)</title><rect x="97.3011%" y="373" width="0.0100%" height="15" fill="rgb(250,160,47)" fg:x="9698" fg:w="1"/><text x="97.5511%" y="383.50"></text></g><g><title>clone (9,531 samples, 95.63%)</title><rect x="1.6956%" y="645" width="95.6256%" height="15" fill="rgb(216,222,40)" fg:x="169" fg:w="9531"/><text x="1.9456%" y="655.50">clone</text></g><g><title>start_thread (9,526 samples, 95.58%)</title><rect x="1.7458%" y="629" width="95.5754%" height="15" fill="rgb(234,217,39)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9,526 samples, 95.58%)</title><rect x="1.7458%" y="613" width="95.5754%" height="15" fill="rgb(207,178,40)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="623.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,526 samples, 95.58%)</title><rect x="1.7458%" y="597" width="95.5754%" height="15" fill="rgb(221,136,13)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9,526 samples, 95.58%)</title><rect x="1.7458%" y="581" width="95.5754%" height="15" fill="rgb(249,199,10)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (9,526 samples, 95.58%)</title><rect x="1.7458%" y="565" width="95.5754%" height="15" fill="rgb(249,222,13)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="575.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (9,526 samples, 95.58%)</title><rect x="1.7458%" y="549" width="95.5754%" height="15" fill="rgb(244,185,38)" fg:x="174" fg:w="9526"/><text x="1.9958%" y="559.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (1 samples, 0.01%)</title><rect x="97.3111%" y="533" width="0.0100%" height="15" fill="rgb(236,202,9)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="543.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="97.3111%" y="517" width="0.0100%" height="15" fill="rgb(250,229,37)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.01%)</title><rect x="97.3111%" y="501" width="0.0100%" height="15" fill="rgb(206,174,23)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="511.50"></text></g><g><title>[libc-2.32.so] (1 samples, 0.01%)</title><rect x="97.3111%" y="485" width="0.0100%" height="15" fill="rgb(211,33,43)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="495.50"></text></g><g><title>[libc-2.32.so] (1 samples, 0.01%)</title><rect x="97.3111%" y="469" width="0.0100%" height="15" fill="rgb(245,58,50)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="479.50"></text></g><g><title>[libc-2.32.so] (1 samples, 0.01%)</title><rect x="97.3111%" y="453" width="0.0100%" height="15" fill="rgb(244,68,36)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="463.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="437" width="0.0100%" height="15" fill="rgb(232,229,15)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="447.50"></text></g><g><title>exc_page_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="421" width="0.0100%" height="15" fill="rgb(254,30,23)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="431.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="405" width="0.0100%" height="15" fill="rgb(235,160,14)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="415.50"></text></g><g><title>handle_mm_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="389" width="0.0100%" height="15" fill="rgb(212,155,44)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="399.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="373" width="0.0100%" height="15" fill="rgb(226,2,50)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="383.50"></text></g><g><title>handle_pte_fault (1 samples, 0.01%)</title><rect x="97.3111%" y="357" width="0.0100%" height="15" fill="rgb(234,177,6)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="367.50"></text></g><g><title>do_anonymous_page (1 samples, 0.01%)</title><rect x="97.3111%" y="341" width="0.0100%" height="15" fill="rgb(217,24,9)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="351.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.01%)</title><rect x="97.3111%" y="325" width="0.0100%" height="15" fill="rgb(220,13,46)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="335.50"></text></g><g><title>__mod_memcg_state.part.0 (1 samples, 0.01%)</title><rect x="97.3111%" y="309" width="0.0100%" height="15" fill="rgb(239,221,27)" fg:x="9699" fg:w="1"/><text x="97.5611%" y="319.50"></text></g><g><title>entry_SYSCALL_64 (150 samples, 1.50%)</title><rect x="97.3212%" y="645" width="1.5050%" height="15" fill="rgb(222,198,25)" fg:x="9700" fg:w="150"/><text x="97.5712%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (85 samples, 0.85%)</title><rect x="98.8261%" y="645" width="0.8528%" height="15" fill="rgb(211,99,13)" fg:x="9850" fg:w="85"/><text x="99.0761%" y="655.50"></text></g><g><title>do_syscall_64 (1 samples, 0.01%)</title><rect x="99.6689%" y="629" width="0.0100%" height="15" fill="rgb(232,111,31)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="639.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.01%)</title><rect x="99.6689%" y="613" width="0.0100%" height="15" fill="rgb(245,82,37)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="623.50"></text></g><g><title>do_execve (1 samples, 0.01%)</title><rect x="99.6689%" y="597" width="0.0100%" height="15" fill="rgb(227,149,46)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="607.50"></text></g><g><title>__do_execve_file (1 samples, 0.01%)</title><rect x="99.6689%" y="581" width="0.0100%" height="15" fill="rgb(218,36,50)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="591.50"></text></g><g><title>exec_binprm (1 samples, 0.01%)</title><rect x="99.6689%" y="565" width="0.0100%" height="15" fill="rgb(226,80,48)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="575.50"></text></g><g><title>search_binary_handler (1 samples, 0.01%)</title><rect x="99.6689%" y="549" width="0.0100%" height="15" fill="rgb(238,224,15)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="559.50"></text></g><g><title>load_elf_binary (1 samples, 0.01%)</title><rect x="99.6689%" y="533" width="0.0100%" height="15" fill="rgb(241,136,10)" fg:x="9934" fg:w="1"/><text x="99.9189%" y="543.50"></text></g><g><title>dev_to_dev (9,962 samples, 99.95%)</title><rect x="0.0000%" y="661" width="99.9498%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="9962"/><text x="0.2500%" y="671.50">dev_to_dev</text></g><g><title>syscall_return_via_sysret (27 samples, 0.27%)</title><rect x="99.6789%" y="645" width="0.2709%" height="15" fill="rgb(207,135,9)" fg:x="9935" fg:w="27"/><text x="99.9289%" y="655.50"></text></g><g><title>all (9,967 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="9967"/><text x="0.2500%" y="687.50"></text></g><g><title>perf (5 samples, 0.05%)</title><rect x="99.9498%" y="661" width="0.0502%" height="15" fill="rgb(245,177,15)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.05%)</title><rect x="99.9498%" y="645" width="0.0502%" height="15" fill="rgb(206,64,50)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="655.50"></text></g><g><title>do_syscall_64 (5 samples, 0.05%)</title><rect x="99.9498%" y="629" width="0.0502%" height="15" fill="rgb(234,36,40)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="639.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.05%)</title><rect x="99.9498%" y="613" width="0.0502%" height="15" fill="rgb(213,64,8)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="623.50"></text></g><g><title>do_execve (5 samples, 0.05%)</title><rect x="99.9498%" y="597" width="0.0502%" height="15" fill="rgb(210,75,36)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="607.50"></text></g><g><title>__do_execve_file (5 samples, 0.05%)</title><rect x="99.9498%" y="581" width="0.0502%" height="15" fill="rgb(229,88,21)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="591.50"></text></g><g><title>exec_binprm (5 samples, 0.05%)</title><rect x="99.9498%" y="565" width="0.0502%" height="15" fill="rgb(252,204,47)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="575.50"></text></g><g><title>search_binary_handler (5 samples, 0.05%)</title><rect x="99.9498%" y="549" width="0.0502%" height="15" fill="rgb(208,77,27)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="559.50"></text></g><g><title>load_elf_binary (5 samples, 0.05%)</title><rect x="99.9498%" y="533" width="0.0502%" height="15" fill="rgb(221,76,26)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="543.50"></text></g><g><title>begin_new_exec (5 samples, 0.05%)</title><rect x="99.9498%" y="517" width="0.0502%" height="15" fill="rgb(225,139,18)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="527.50"></text></g><g><title>perf_event_exec (5 samples, 0.05%)</title><rect x="99.9498%" y="501" width="0.0502%" height="15" fill="rgb(230,137,11)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="511.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.05%)</title><rect x="99.9498%" y="485" width="0.0502%" height="15" fill="rgb(212,28,1)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="495.50"></text></g><g><title>ctx_resched (5 samples, 0.05%)</title><rect x="99.9498%" y="469" width="0.0502%" height="15" fill="rgb(248,164,17)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="479.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.05%)</title><rect x="99.9498%" y="453" width="0.0502%" height="15" fill="rgb(222,171,42)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="463.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.05%)</title><rect x="99.9498%" y="437" width="0.0502%" height="15" fill="rgb(243,84,45)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="447.50"></text></g><g><title>native_write_msr (5 samples, 0.05%)</title><rect x="99.9498%" y="421" width="0.0502%" height="15" fill="rgb(252,49,23)" fg:x="9962" fg:w="5"/><text x="100.1998%" y="431.50"></text></g></svg></svg>