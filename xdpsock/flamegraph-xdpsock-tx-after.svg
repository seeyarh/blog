<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="660"><g><title>dev_to_dev::tx_pkts (11 samples, 1.67%)</title><rect x="0.0000%" y="645" width="1.6667%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="11"/><text x="0.2500%" y="655.50"></text></g><g><title>[anon] (24 samples, 3.64%)</title><rect x="0.0000%" y="661" width="3.6364%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="24"/><text x="0.2500%" y="671.50">[ano..</text></g><g><title>xdpsock::xsk::tx::XskTx::send_apply (13 samples, 1.97%)</title><rect x="1.6667%" y="645" width="1.9697%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="13"/><text x="1.9167%" y="655.50">x..</text></g><g><title>_xsk_ring_cons__comp_addr (1 samples, 0.15%)</title><rect x="3.6364%" y="645" width="0.1515%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="1"/><text x="3.8864%" y="655.50"></text></g><g><title>_xsk_ring_cons__peek (18 samples, 2.73%)</title><rect x="3.7879%" y="645" width="2.7273%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="18"/><text x="4.0379%" y="655.50">_x..</text></g><g><title>xdpsock::umem::umem::FrameStatus::is_free (13 samples, 1.97%)</title><rect x="6.5152%" y="645" width="1.9697%" height="15" fill="rgb(232,128,0)" fg:x="43" fg:w="13"/><text x="6.7652%" y="655.50">x..</text></g><g><title>xdpsock::xsk::tx::XskTx::complete_frames (66 samples, 10.00%)</title><rect x="8.4848%" y="645" width="10.0000%" height="15" fill="rgb(207,160,47)" fg:x="56" fg:w="66"/><text x="8.7348%" y="655.50">xdpsock::xsk::..</text></g><g><title>xdpsock::umem::umem::CompQueue::consume (14 samples, 2.12%)</title><rect x="16.3636%" y="629" width="2.1212%" height="15" fill="rgb(228,23,34)" fg:x="108" fg:w="14"/><text x="16.6136%" y="639.50">x..</text></g><g><title>xdpsock::xsk::tx::XskTx::put_batch_on_tx_queue (1 samples, 0.15%)</title><rect x="18.4848%" y="645" width="0.1515%" height="15" fill="rgb(218,30,26)" fg:x="122" fg:w="1"/><text x="18.7348%" y="655.50"></text></g><g><title>xdpsock::socket::socket::TxQueue::produce_and_wakeup (1 samples, 0.15%)</title><rect x="18.4848%" y="629" width="0.1515%" height="15" fill="rgb(220,122,19)" fg:x="122" fg:w="1"/><text x="18.7348%" y="639.50"></text></g><g><title>xdpsock::socket::socket::TxQueue::produce (1 samples, 0.15%)</title><rect x="18.4848%" y="613" width="0.1515%" height="15" fill="rgb(250,228,42)" fg:x="122" fg:w="1"/><text x="18.7348%" y="623.50"></text></g><g><title>[unknown] (172 samples, 26.06%)</title><rect x="3.6364%" y="661" width="26.0606%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="172"/><text x="3.8864%" y="671.50">[unknown]</text></g><g><title>xdpsock::xsk::tx::XskTx::send_apply (73 samples, 11.06%)</title><rect x="18.6364%" y="645" width="11.0606%" height="15" fill="rgb(216,20,37)" fg:x="123" fg:w="73"/><text x="18.8864%" y="655.50">xdpsock::xsk::tx..</text></g><g><title>_start (1 samples, 0.15%)</title><rect x="29.6970%" y="661" width="0.1515%" height="15" fill="rgb(206,188,39)" fg:x="196" fg:w="1"/><text x="29.9470%" y="671.50"></text></g><g><title>__libc_start_main (1 samples, 0.15%)</title><rect x="29.6970%" y="645" width="0.1515%" height="15" fill="rgb(217,207,13)" fg:x="196" fg:w="1"/><text x="29.9470%" y="655.50"></text></g><g><title>main (1 samples, 0.15%)</title><rect x="29.6970%" y="629" width="0.1515%" height="15" fill="rgb(231,73,38)" fg:x="196" fg:w="1"/><text x="29.9470%" y="639.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.15%)</title><rect x="29.6970%" y="613" width="0.1515%" height="15" fill="rgb(225,20,46)" fg:x="196" fg:w="1"/><text x="29.9470%" y="623.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.15%)</title><rect x="29.6970%" y="597" width="0.1515%" height="15" fill="rgb(210,31,41)" fg:x="196" fg:w="1"/><text x="29.9470%" y="607.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.15%)</title><rect x="29.6970%" y="581" width="0.1515%" height="15" fill="rgb(221,200,47)" fg:x="196" fg:w="1"/><text x="29.9470%" y="591.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.15%)</title><rect x="29.6970%" y="565" width="0.1515%" height="15" fill="rgb(226,26,5)" fg:x="196" fg:w="1"/><text x="29.9470%" y="575.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.15%)</title><rect x="29.6970%" y="549" width="0.1515%" height="15" fill="rgb(249,33,26)" fg:x="196" fg:w="1"/><text x="29.9470%" y="559.50"></text></g><g><title>getdelim (1 samples, 0.15%)</title><rect x="29.6970%" y="533" width="0.1515%" height="15" fill="rgb(235,183,28)" fg:x="196" fg:w="1"/><text x="29.9470%" y="543.50"></text></g><g><title>_IO_file_underflow (1 samples, 0.15%)</title><rect x="29.6970%" y="517" width="0.1515%" height="15" fill="rgb(221,5,38)" fg:x="196" fg:w="1"/><text x="29.9470%" y="527.50"></text></g><g><title>__read_nocancel (1 samples, 0.15%)</title><rect x="29.6970%" y="501" width="0.1515%" height="15" fill="rgb(247,18,42)" fg:x="196" fg:w="1"/><text x="29.9470%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="29.6970%" y="485" width="0.1515%" height="15" fill="rgb(241,131,45)" fg:x="196" fg:w="1"/><text x="29.9470%" y="495.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="29.6970%" y="469" width="0.1515%" height="15" fill="rgb(249,31,29)" fg:x="196" fg:w="1"/><text x="29.9470%" y="479.50"></text></g><g><title>__x64_sys_read (1 samples, 0.15%)</title><rect x="29.6970%" y="453" width="0.1515%" height="15" fill="rgb(225,111,53)" fg:x="196" fg:w="1"/><text x="29.9470%" y="463.50"></text></g><g><title>ksys_read (1 samples, 0.15%)</title><rect x="29.6970%" y="437" width="0.1515%" height="15" fill="rgb(238,160,17)" fg:x="196" fg:w="1"/><text x="29.9470%" y="447.50"></text></g><g><title>vfs_read (1 samples, 0.15%)</title><rect x="29.6970%" y="421" width="0.1515%" height="15" fill="rgb(214,148,48)" fg:x="196" fg:w="1"/><text x="29.9470%" y="431.50"></text></g><g><title>seq_read (1 samples, 0.15%)</title><rect x="29.6970%" y="405" width="0.1515%" height="15" fill="rgb(232,36,49)" fg:x="196" fg:w="1"/><text x="29.9470%" y="415.50"></text></g><g><title>show_map (1 samples, 0.15%)</title><rect x="29.6970%" y="389" width="0.1515%" height="15" fill="rgb(209,103,24)" fg:x="196" fg:w="1"/><text x="29.9470%" y="399.50"></text></g><g><title>show_map_vma (1 samples, 0.15%)</title><rect x="29.6970%" y="373" width="0.1515%" height="15" fill="rgb(229,88,8)" fg:x="196" fg:w="1"/><text x="29.9470%" y="383.50"></text></g><g><title>show_vma_header_prefix (1 samples, 0.15%)</title><rect x="29.6970%" y="357" width="0.1515%" height="15" fill="rgb(213,181,19)" fg:x="196" fg:w="1"/><text x="29.9470%" y="367.50"></text></g><g><title>seq_put_decimal_ull (1 samples, 0.15%)</title><rect x="29.6970%" y="341" width="0.1515%" height="15" fill="rgb(254,191,54)" fg:x="196" fg:w="1"/><text x="29.9470%" y="351.50"></text></g><g><title>seq_put_decimal_ull_width (1 samples, 0.15%)</title><rect x="29.6970%" y="325" width="0.1515%" height="15" fill="rgb(241,83,37)" fg:x="196" fg:w="1"/><text x="29.9470%" y="335.50"></text></g><g><title>num_to_str (1 samples, 0.15%)</title><rect x="29.6970%" y="309" width="0.1515%" height="15" fill="rgb(233,36,39)" fg:x="196" fg:w="1"/><text x="29.9470%" y="319.50"></text></g><g><title>put_dec_trunc8 (1 samples, 0.15%)</title><rect x="29.6970%" y="293" width="0.1515%" height="15" fill="rgb(226,3,54)" fg:x="196" fg:w="1"/><text x="29.9470%" y="303.50"></text></g><g><title>_xsk_ring_cons__peek (9 samples, 1.36%)</title><rect x="29.8485%" y="661" width="1.3636%" height="15" fill="rgb(245,192,40)" fg:x="197" fg:w="9"/><text x="30.0985%" y="671.50"></text></g><g><title>_xsk_ring_cons__release (12 samples, 1.82%)</title><rect x="31.2121%" y="661" width="1.8182%" height="15" fill="rgb(238,167,29)" fg:x="206" fg:w="12"/><text x="31.4621%" y="671.50">_..</text></g><g><title>ret_from_fork (5 samples, 0.76%)</title><rect x="33.0303%" y="645" width="0.7576%" height="15" fill="rgb(232,182,51)" fg:x="218" fg:w="5"/><text x="33.2803%" y="655.50"></text></g><g><title>schedule_tail (5 samples, 0.76%)</title><rect x="33.0303%" y="629" width="0.7576%" height="15" fill="rgb(231,60,39)" fg:x="218" fg:w="5"/><text x="33.2803%" y="639.50"></text></g><g><title>finish_task_switch (5 samples, 0.76%)</title><rect x="33.0303%" y="613" width="0.7576%" height="15" fill="rgb(208,69,12)" fg:x="218" fg:w="5"/><text x="33.2803%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.76%)</title><rect x="33.0303%" y="597" width="0.7576%" height="15" fill="rgb(235,93,37)" fg:x="218" fg:w="5"/><text x="33.2803%" y="607.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.76%)</title><rect x="33.0303%" y="581" width="0.7576%" height="15" fill="rgb(213,116,39)" fg:x="218" fg:w="5"/><text x="33.2803%" y="591.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.76%)</title><rect x="33.0303%" y="565" width="0.7576%" height="15" fill="rgb(222,207,29)" fg:x="218" fg:w="5"/><text x="33.2803%" y="575.50"></text></g><g><title>native_write_msr (5 samples, 0.76%)</title><rect x="33.0303%" y="549" width="0.7576%" height="15" fill="rgb(206,96,30)" fg:x="218" fg:w="5"/><text x="33.2803%" y="559.50"></text></g><g><title>dev_to_dev::build_xsk (1 samples, 0.15%)</title><rect x="33.7879%" y="437" width="0.1515%" height="15" fill="rgb(218,138,4)" fg:x="223" fg:w="1"/><text x="34.0379%" y="447.50"></text></g><g><title>xdpsock::xsk::xsk::Xsk2::new (1 samples, 0.15%)</title><rect x="33.7879%" y="421" width="0.1515%" height="15" fill="rgb(250,191,14)" fg:x="223" fg:w="1"/><text x="34.0379%" y="431.50"></text></g><g><title>xdpsock::umem::umem::UmemBuilderWithMmap::create_umem (1 samples, 0.15%)</title><rect x="33.7879%" y="405" width="0.1515%" height="15" fill="rgb(239,60,40)" fg:x="223" fg:w="1"/><text x="34.0379%" y="415.50"></text></g><g><title>xsk_umem__create_v0_0_4 (1 samples, 0.15%)</title><rect x="33.7879%" y="389" width="0.1515%" height="15" fill="rgb(206,27,48)" fg:x="223" fg:w="1"/><text x="34.0379%" y="399.50"></text></g><g><title>setsockopt (1 samples, 0.15%)</title><rect x="33.7879%" y="373" width="0.1515%" height="15" fill="rgb(225,35,8)" fg:x="223" fg:w="1"/><text x="34.0379%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="33.7879%" y="357" width="0.1515%" height="15" fill="rgb(250,213,24)" fg:x="223" fg:w="1"/><text x="34.0379%" y="367.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="33.7879%" y="341" width="0.1515%" height="15" fill="rgb(247,123,22)" fg:x="223" fg:w="1"/><text x="34.0379%" y="351.50"></text></g><g><title>__x64_sys_setsockopt (1 samples, 0.15%)</title><rect x="33.7879%" y="325" width="0.1515%" height="15" fill="rgb(231,138,38)" fg:x="223" fg:w="1"/><text x="34.0379%" y="335.50"></text></g><g><title>__sys_setsockopt (1 samples, 0.15%)</title><rect x="33.7879%" y="309" width="0.1515%" height="15" fill="rgb(231,145,46)" fg:x="223" fg:w="1"/><text x="34.0379%" y="319.50"></text></g><g><title>xsk_setsockopt (1 samples, 0.15%)</title><rect x="33.7879%" y="293" width="0.1515%" height="15" fill="rgb(251,118,11)" fg:x="223" fg:w="1"/><text x="34.0379%" y="303.50"></text></g><g><title>xdp_umem_create (1 samples, 0.15%)</title><rect x="33.7879%" y="277" width="0.1515%" height="15" fill="rgb(217,147,25)" fg:x="223" fg:w="1"/><text x="34.0379%" y="287.50"></text></g><g><title>xdp_umem_reg (1 samples, 0.15%)</title><rect x="33.7879%" y="261" width="0.1515%" height="15" fill="rgb(247,81,37)" fg:x="223" fg:w="1"/><text x="34.0379%" y="271.50"></text></g><g><title>xdp_umem_pin_pages (1 samples, 0.15%)</title><rect x="33.7879%" y="245" width="0.1515%" height="15" fill="rgb(209,12,38)" fg:x="223" fg:w="1"/><text x="34.0379%" y="255.50"></text></g><g><title>pin_user_pages (1 samples, 0.15%)</title><rect x="33.7879%" y="229" width="0.1515%" height="15" fill="rgb(227,1,9)" fg:x="223" fg:w="1"/><text x="34.0379%" y="239.50"></text></g><g><title>__gup_longterm_locked (1 samples, 0.15%)</title><rect x="33.7879%" y="213" width="0.1515%" height="15" fill="rgb(248,47,43)" fg:x="223" fg:w="1"/><text x="34.0379%" y="223.50"></text></g><g><title>__get_user_pages (1 samples, 0.15%)</title><rect x="33.7879%" y="197" width="0.1515%" height="15" fill="rgb(221,10,30)" fg:x="223" fg:w="1"/><text x="34.0379%" y="207.50"></text></g><g><title>handle_mm_fault (1 samples, 0.15%)</title><rect x="33.7879%" y="181" width="0.1515%" height="15" fill="rgb(210,229,1)" fg:x="223" fg:w="1"/><text x="34.0379%" y="191.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.15%)</title><rect x="33.7879%" y="165" width="0.1515%" height="15" fill="rgb(222,148,37)" fg:x="223" fg:w="1"/><text x="34.0379%" y="175.50"></text></g><g><title>handle_pte_fault (1 samples, 0.15%)</title><rect x="33.7879%" y="149" width="0.1515%" height="15" fill="rgb(234,67,33)" fg:x="223" fg:w="1"/><text x="34.0379%" y="159.50"></text></g><g><title>do_anonymous_page (1 samples, 0.15%)</title><rect x="33.7879%" y="133" width="0.1515%" height="15" fill="rgb(247,98,35)" fg:x="223" fg:w="1"/><text x="34.0379%" y="143.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.15%)</title><rect x="33.7879%" y="117" width="0.1515%" height="15" fill="rgb(247,138,52)" fg:x="223" fg:w="1"/><text x="34.0379%" y="127.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.15%)</title><rect x="33.7879%" y="101" width="0.1515%" height="15" fill="rgb(213,79,30)" fg:x="223" fg:w="1"/><text x="34.0379%" y="111.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.15%)</title><rect x="33.7879%" y="85" width="0.1515%" height="15" fill="rgb(246,177,23)" fg:x="223" fg:w="1"/><text x="34.0379%" y="95.50"></text></g><g><title>rmqueue (1 samples, 0.15%)</title><rect x="33.7879%" y="69" width="0.1515%" height="15" fill="rgb(230,62,27)" fg:x="223" fg:w="1"/><text x="34.0379%" y="79.50"></text></g><g><title>rmqueue_pcplist.constprop.0 (1 samples, 0.15%)</title><rect x="33.7879%" y="53" width="0.1515%" height="15" fill="rgb(216,154,8)" fg:x="223" fg:w="1"/><text x="34.0379%" y="63.50"></text></g><g><title>rmqueue_bulk.constprop.0 (1 samples, 0.15%)</title><rect x="33.7879%" y="37" width="0.1515%" height="15" fill="rgb(244,35,45)" fg:x="223" fg:w="1"/><text x="34.0379%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.45%)</title><rect x="36.0606%" y="373" width="0.4545%" height="15" fill="rgb(251,115,12)" fg:x="238" fg:w="3"/><text x="36.3106%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u64&gt;::lt (3 samples, 0.45%)</title><rect x="36.0606%" y="357" width="0.4545%" height="15" fill="rgb(240,54,50)" fg:x="238" fg:w="3"/><text x="36.3106%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 2.12%)</title><rect x="35.9091%" y="421" width="2.1212%" height="15" fill="rgb(233,84,52)" fg:x="237" fg:w="14"/><text x="36.1591%" y="431.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (14 samples, 2.12%)</title><rect x="35.9091%" y="405" width="2.1212%" height="15" fill="rgb(207,117,47)" fg:x="237" fg:w="14"/><text x="36.1591%" y="415.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 2.12%)</title><rect x="35.9091%" y="389" width="2.1212%" height="15" fill="rgb(249,43,39)" fg:x="237" fg:w="14"/><text x="36.1591%" y="399.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (10 samples, 1.52%)</title><rect x="36.5152%" y="373" width="1.5152%" height="15" fill="rgb(209,38,44)" fg:x="241" fg:w="10"/><text x="36.7652%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10 samples, 1.52%)</title><rect x="36.5152%" y="357" width="1.5152%" height="15" fill="rgb(236,212,23)" fg:x="241" fg:w="10"/><text x="36.7652%" y="367.50"></text></g><g><title>dev_to_dev::split_pkts::{{closure}} (10 samples, 1.52%)</title><rect x="36.5152%" y="341" width="1.5152%" height="15" fill="rgb(242,79,21)" fg:x="241" fg:w="10"/><text x="36.7652%" y="351.50"></text></g><g><title>&lt;&amp;u64 as core::ops::arith::Rem&lt;u64&gt;&gt;::rem (10 samples, 1.52%)</title><rect x="36.5152%" y="325" width="1.5152%" height="15" fill="rgb(211,96,35)" fg:x="241" fg:w="10"/><text x="36.7652%" y="335.50"></text></g><g><title>&lt;u64 as core::ops::arith::Rem&gt;::rem (10 samples, 1.52%)</title><rect x="36.5152%" y="309" width="1.5152%" height="15" fill="rgb(253,215,40)" fg:x="241" fg:w="10"/><text x="36.7652%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::xsk::xsk::Xsk2&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="421" width="0.1515%" height="15" fill="rgb(211,81,21)" fg:x="251" fg:w="1"/><text x="38.2803%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::xsk::rx::XskRx&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="405" width="0.1515%" height="15" fill="rgb(208,190,38)" fg:x="251" fg:w="1"/><text x="38.2803%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;xdpsock::umem::umem::Frame&gt;&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="389" width="0.1515%" height="15" fill="rgb(235,213,38)" fg:x="251" fg:w="1"/><text x="38.2803%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="38.0303%" y="373" width="0.1515%" height="15" fill="rgb(237,122,38)" fg:x="251" fg:w="1"/><text x="38.2803%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[xdpsock::umem::umem::Frame]&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="357" width="0.1515%" height="15" fill="rgb(244,218,35)" fg:x="251" fg:w="1"/><text x="38.2803%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::umem::umem::Frame&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="341" width="0.1515%" height="15" fill="rgb(240,68,47)" fg:x="251" fg:w="1"/><text x="38.2803%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;xdpsock::umem::mmap::MmapArea&gt;&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="325" width="0.1515%" height="15" fill="rgb(210,16,53)" fg:x="251" fg:w="1"/><text x="38.2803%" y="335.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="38.0303%" y="309" width="0.1515%" height="15" fill="rgb(235,124,12)" fg:x="251" fg:w="1"/><text x="38.2803%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.15%)</title><rect x="38.0303%" y="293" width="0.1515%" height="15" fill="rgb(224,169,11)" fg:x="251" fg:w="1"/><text x="38.2803%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;xdpsock::umem::mmap::MmapArea&gt; (1 samples, 0.15%)</title><rect x="38.0303%" y="277" width="0.1515%" height="15" fill="rgb(250,166,2)" fg:x="251" fg:w="1"/><text x="38.2803%" y="287.50"></text></g><g><title>&lt;xdpsock::umem::mmap::MmapArea as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="38.0303%" y="261" width="0.1515%" height="15" fill="rgb(242,216,29)" fg:x="251" fg:w="1"/><text x="38.2803%" y="271.50"></text></g><g><title>__munmap (1 samples, 0.15%)</title><rect x="38.0303%" y="245" width="0.1515%" height="15" fill="rgb(230,116,27)" fg:x="251" fg:w="1"/><text x="38.2803%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="38.0303%" y="229" width="0.1515%" height="15" fill="rgb(228,99,48)" fg:x="251" fg:w="1"/><text x="38.2803%" y="239.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="38.0303%" y="213" width="0.1515%" height="15" fill="rgb(253,11,6)" fg:x="251" fg:w="1"/><text x="38.2803%" y="223.50"></text></g><g><title>__x64_sys_munmap (1 samples, 0.15%)</title><rect x="38.0303%" y="197" width="0.1515%" height="15" fill="rgb(247,143,39)" fg:x="251" fg:w="1"/><text x="38.2803%" y="207.50"></text></g><g><title>__vm_munmap (1 samples, 0.15%)</title><rect x="38.0303%" y="181" width="0.1515%" height="15" fill="rgb(236,97,10)" fg:x="251" fg:w="1"/><text x="38.2803%" y="191.50"></text></g><g><title>__do_munmap (1 samples, 0.15%)</title><rect x="38.0303%" y="165" width="0.1515%" height="15" fill="rgb(233,208,19)" fg:x="251" fg:w="1"/><text x="38.2803%" y="175.50"></text></g><g><title>unmap_region (1 samples, 0.15%)</title><rect x="38.0303%" y="149" width="0.1515%" height="15" fill="rgb(216,164,2)" fg:x="251" fg:w="1"/><text x="38.2803%" y="159.50"></text></g><g><title>unmap_vmas (1 samples, 0.15%)</title><rect x="38.0303%" y="133" width="0.1515%" height="15" fill="rgb(220,129,5)" fg:x="251" fg:w="1"/><text x="38.2803%" y="143.50"></text></g><g><title>unmap_single_vma (1 samples, 0.15%)</title><rect x="38.0303%" y="117" width="0.1515%" height="15" fill="rgb(242,17,10)" fg:x="251" fg:w="1"/><text x="38.2803%" y="127.50"></text></g><g><title>unmap_page_range (1 samples, 0.15%)</title><rect x="38.0303%" y="101" width="0.1515%" height="15" fill="rgb(242,107,0)" fg:x="251" fg:w="1"/><text x="38.2803%" y="111.50"></text></g><g><title>zap_pte_range (1 samples, 0.15%)</title><rect x="38.0303%" y="85" width="0.1515%" height="15" fill="rgb(251,28,31)" fg:x="251" fg:w="1"/><text x="38.2803%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.61%)</title><rect x="52.7273%" y="405" width="0.6061%" height="15" fill="rgb(233,223,10)" fg:x="348" fg:w="4"/><text x="52.9773%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.61%)</title><rect x="52.7273%" y="389" width="0.6061%" height="15" fill="rgb(215,21,27)" fg:x="348" fg:w="4"/><text x="52.9773%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.61%)</title><rect x="52.7273%" y="373" width="0.6061%" height="15" fill="rgb(232,23,21)" fg:x="348" fg:w="4"/><text x="52.9773%" y="383.50"></text></g><g><title>dev_to_dev::tx_pkts::{{closure}} (47 samples, 7.12%)</title><rect x="53.3333%" y="405" width="7.1212%" height="15" fill="rgb(244,5,23)" fg:x="352" fg:w="47"/><text x="53.5833%" y="415.50">dev_to_dev..</text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::write_u64 (45 samples, 6.82%)</title><rect x="53.6364%" y="389" width="6.8182%" height="15" fill="rgb(226,81,46)" fg:x="354" fg:w="45"/><text x="53.8864%" y="399.50">&lt;byteorde..</text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 6.82%)</title><rect x="53.6364%" y="373" width="6.8182%" height="15" fill="rgb(247,70,30)" fg:x="354" fg:w="45"/><text x="53.8864%" y="383.50">core::int..</text></g><g><title>log::max_level (13 samples, 1.97%)</title><rect x="60.4545%" y="405" width="1.9697%" height="15" fill="rgb(212,68,19)" fg:x="399" fg:w="13"/><text x="60.7045%" y="415.50">l..</text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 1.97%)</title><rect x="60.4545%" y="389" width="1.9697%" height="15" fill="rgb(240,187,13)" fg:x="399" fg:w="13"/><text x="60.7045%" y="399.50">c..</text></g><g><title>core::sync::atomic::atomic_load (13 samples, 1.97%)</title><rect x="60.4545%" y="373" width="1.9697%" height="15" fill="rgb(223,113,26)" fg:x="399" fg:w="13"/><text x="60.7045%" y="383.50">c..</text></g><g><title>xdpsock::umem::umem::Frame::umem_region_mut (1 samples, 0.15%)</title><rect x="62.4242%" y="405" width="0.1515%" height="15" fill="rgb(206,192,2)" fg:x="412" fg:w="1"/><text x="62.6742%" y="415.50"></text></g><g><title>xdpsock::umem::mmap::MmapArea::mem_range_mut (1 samples, 0.15%)</title><rect x="62.4242%" y="389" width="0.1515%" height="15" fill="rgb(241,108,4)" fg:x="412" fg:w="1"/><text x="62.6742%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.15%)</title><rect x="62.4242%" y="373" width="0.1515%" height="15" fill="rgb(247,173,49)" fg:x="412" fg:w="1"/><text x="62.6742%" y="383.50"></text></g><g><title>xdpsock::umem::umem::FrameStatus::is_free (5 samples, 0.76%)</title><rect x="62.5758%" y="405" width="0.7576%" height="15" fill="rgb(224,114,35)" fg:x="413" fg:w="5"/><text x="62.8258%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (12 samples, 1.82%)</title><rect x="64.8485%" y="389" width="1.8182%" height="15" fill="rgb(245,159,27)" fg:x="428" fg:w="12"/><text x="65.0985%" y="399.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 1.21%)</title><rect x="65.4545%" y="373" width="1.2121%" height="15" fill="rgb(245,172,44)" fg:x="432" fg:w="8"/><text x="65.7045%" y="383.50"></text></g><g><title>log::max_level (23 samples, 3.48%)</title><rect x="66.6667%" y="389" width="3.4848%" height="15" fill="rgb(236,23,11)" fg:x="440" fg:w="23"/><text x="66.9167%" y="399.50">log..</text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 3.48%)</title><rect x="66.6667%" y="373" width="3.4848%" height="15" fill="rgb(205,117,38)" fg:x="440" fg:w="23"/><text x="66.9167%" y="383.50">cor..</text></g><g><title>core::sync::atomic::atomic_load (23 samples, 3.48%)</title><rect x="66.6667%" y="357" width="3.4848%" height="15" fill="rgb(237,72,25)" fg:x="440" fg:w="23"/><text x="66.9167%" y="367.50">cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::convert::AsMut&lt;T&gt;&gt;::as_mut (17 samples, 2.58%)</title><rect x="71.5152%" y="373" width="2.5758%" height="15" fill="rgb(244,70,9)" fg:x="472" fg:w="17"/><text x="71.7652%" y="383.50">&lt;a..</text></g><g><title>_xsk_ring_cons__comp_addr (1 samples, 0.15%)</title><rect x="74.0909%" y="373" width="0.1515%" height="15" fill="rgb(217,125,39)" fg:x="489" fg:w="1"/><text x="74.3409%" y="383.50"></text></g><g><title>xsk_ring_cons__comp_addr (1 samples, 0.15%)</title><rect x="74.0909%" y="357" width="0.1515%" height="15" fill="rgb(235,36,10)" fg:x="489" fg:w="1"/><text x="74.3409%" y="367.50"></text></g><g><title>_xsk_ring_cons__peek (52 samples, 7.88%)</title><rect x="74.2424%" y="373" width="7.8788%" height="15" fill="rgb(251,123,47)" fg:x="490" fg:w="52"/><text x="74.4924%" y="383.50">_xsk_ring_c..</text></g><g><title>xsk_ring_cons__peek (50 samples, 7.58%)</title><rect x="74.5455%" y="357" width="7.5758%" height="15" fill="rgb(221,13,13)" fg:x="492" fg:w="50"/><text x="74.7955%" y="367.50">xsk_ring_c..</text></g><g><title>xsk_cons_nb_avail (47 samples, 7.12%)</title><rect x="75.0000%" y="341" width="7.1212%" height="15" fill="rgb(238,131,9)" fg:x="495" fg:w="47"/><text x="75.2500%" y="351.50">xsk_cons_n..</text></g><g><title>_xsk_ring_cons__release (14 samples, 2.12%)</title><rect x="82.1212%" y="373" width="2.1212%" height="15" fill="rgb(211,50,8)" fg:x="542" fg:w="14"/><text x="82.3712%" y="383.50">_..</text></g><g><title>xsk_ring_cons__release (1 samples, 0.15%)</title><rect x="84.0909%" y="357" width="0.1515%" height="15" fill="rgb(245,182,24)" fg:x="555" fg:w="1"/><text x="84.3409%" y="367.50"></text></g><g><title>xdpsock::umem::umem::CompQueue::consume (102 samples, 15.45%)</title><rect x="70.1515%" y="389" width="15.4545%" height="15" fill="rgb(242,14,37)" fg:x="463" fg:w="102"/><text x="70.4015%" y="399.50">xdpsock::umem::umem::Com..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 1.36%)</title><rect x="84.2424%" y="373" width="1.3636%" height="15" fill="rgb(246,228,12)" fg:x="556" fg:w="9"/><text x="84.4924%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.15%)</title><rect x="90.4545%" y="357" width="0.1515%" height="15" fill="rgb(213,55,15)" fg:x="597" fg:w="1"/><text x="90.7045%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (17 samples, 2.58%)</title><rect x="90.4545%" y="373" width="2.5758%" height="15" fill="rgb(209,9,3)" fg:x="597" fg:w="17"/><text x="90.7045%" y="383.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 2.42%)</title><rect x="90.6061%" y="357" width="2.4242%" height="15" fill="rgb(230,59,30)" fg:x="598" fg:w="16"/><text x="90.8561%" y="367.50">co..</text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 2.42%)</title><rect x="90.6061%" y="341" width="2.4242%" height="15" fill="rgb(209,121,21)" fg:x="598" fg:w="16"/><text x="90.8561%" y="351.50">&lt;c..</text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 2.42%)</title><rect x="90.6061%" y="325" width="2.4242%" height="15" fill="rgb(220,109,13)" fg:x="598" fg:w="16"/><text x="90.8561%" y="335.50">&lt;c..</text></g><g><title>xdpsock::xsk::tx::XskTx::complete_frames (199 samples, 30.15%)</title><rect x="63.3333%" y="405" width="30.1515%" height="15" fill="rgb(232,18,1)" fg:x="418" fg:w="199"/><text x="63.5833%" y="415.50">xdpsock::xsk::tx::XskTx::complete_frames</text></g><g><title>xdpsock::xsk::tx::XskTx::update_tx_frames (52 samples, 7.88%)</title><rect x="85.6061%" y="389" width="7.8788%" height="15" fill="rgb(215,41,42)" fg:x="565" fg:w="52"/><text x="85.8561%" y="399.50">xdpsock::xs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.45%)</title><rect x="93.0303%" y="373" width="0.4545%" height="15" fill="rgb(224,123,36)" fg:x="614" fg:w="3"/><text x="93.2803%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.45%)</title><rect x="93.0303%" y="357" width="0.4545%" height="15" fill="rgb(240,125,3)" fg:x="614" fg:w="3"/><text x="93.2803%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.45%)</title><rect x="93.0303%" y="341" width="0.4545%" height="15" fill="rgb(205,98,50)" fg:x="614" fg:w="3"/><text x="93.2803%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::convert::AsMut&lt;T&gt;&gt;::as_mut (1 samples, 0.15%)</title><rect x="96.9697%" y="357" width="0.1515%" height="15" fill="rgb(205,185,37)" fg:x="640" fg:w="1"/><text x="97.2197%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.45%)</title><rect x="97.1212%" y="357" width="0.4545%" height="15" fill="rgb(238,207,15)" fg:x="641" fg:w="3"/><text x="97.3712%" y="367.50"></text></g><g><title>_xsk_ring_prod__reserve (1 samples, 0.15%)</title><rect x="97.5758%" y="357" width="0.1515%" height="15" fill="rgb(213,199,42)" fg:x="644" fg:w="1"/><text x="97.8258%" y="367.50"></text></g><g><title>xsk_ring_prod__reserve (1 samples, 0.15%)</title><rect x="97.5758%" y="341" width="0.1515%" height="15" fill="rgb(235,201,11)" fg:x="644" fg:w="1"/><text x="97.8258%" y="351.50"></text></g><g><title>xsk_prod_nb_free (1 samples, 0.15%)</title><rect x="97.5758%" y="325" width="0.1515%" height="15" fill="rgb(207,46,11)" fg:x="644" fg:w="1"/><text x="97.8258%" y="335.50"></text></g><g><title>_xsk_ring_prod__tx_desc (3 samples, 0.45%)</title><rect x="97.7273%" y="357" width="0.4545%" height="15" fill="rgb(241,35,35)" fg:x="645" fg:w="3"/><text x="97.9773%" y="367.50"></text></g><g><title>xsk_ring_prod__tx_desc (2 samples, 0.30%)</title><rect x="97.8788%" y="341" width="0.3030%" height="15" fill="rgb(243,32,47)" fg:x="646" fg:w="2"/><text x="98.1288%" y="351.50"></text></g><g><title>xdpsock::socket::socket::TxQueue::produce (23 samples, 3.48%)</title><rect x="94.8485%" y="373" width="3.4848%" height="15" fill="rgb(247,202,23)" fg:x="626" fg:w="23"/><text x="95.0985%" y="383.50">xdp..</text></g><g><title>log::max_level (1 samples, 0.15%)</title><rect x="98.1818%" y="357" width="0.1515%" height="15" fill="rgb(219,102,11)" fg:x="648" fg:w="1"/><text x="98.4318%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.15%)</title><rect x="98.1818%" y="341" width="0.1515%" height="15" fill="rgb(243,110,44)" fg:x="648" fg:w="1"/><text x="98.4318%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.15%)</title><rect x="98.1818%" y="325" width="0.1515%" height="15" fill="rgb(222,74,54)" fg:x="648" fg:w="1"/><text x="98.4318%" y="335.50"></text></g><g><title>__syscall_return_slowpath (1 samples, 0.15%)</title><rect x="98.3333%" y="309" width="0.1515%" height="15" fill="rgb(216,99,12)" fg:x="649" fg:w="1"/><text x="98.5833%" y="319.50"></text></g><g><title>__prepare_exit_to_usermode (1 samples, 0.15%)</title><rect x="98.3333%" y="293" width="0.1515%" height="15" fill="rgb(226,22,26)" fg:x="649" fg:w="1"/><text x="98.5833%" y="303.50"></text></g><g><title>fpregs_assert_state_consistent (1 samples, 0.15%)</title><rect x="98.3333%" y="277" width="0.1515%" height="15" fill="rgb(217,163,10)" fg:x="649" fg:w="1"/><text x="98.5833%" y="287.50"></text></g><g><title>apparmor_socket_sendmsg (1 samples, 0.15%)</title><rect x="98.4848%" y="261" width="0.1515%" height="15" fill="rgb(213,25,53)" fg:x="650" fg:w="1"/><text x="98.7348%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (429 samples, 65.00%)</title><rect x="33.7879%" y="613" width="65.0000%" height="15" fill="rgb(252,105,26)" fg:x="223" fg:w="429"/><text x="34.0379%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (429 samples, 65.00%)</title><rect x="33.7879%" y="597" width="65.0000%" height="15" fill="rgb(220,39,43)" fg:x="223" fg:w="429"/><text x="34.0379%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (429 samples, 65.00%)</title><rect x="33.7879%" y="581" width="65.0000%" height="15" fill="rgb(229,68,48)" fg:x="223" fg:w="429"/><text x="34.0379%" y="591.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (429 samples, 65.00%)</title><rect x="33.7879%" y="565" width="65.0000%" height="15" fill="rgb(252,8,32)" fg:x="223" fg:w="429"/><text x="34.0379%" y="575.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (429 samples, 65.00%)</title><rect x="33.7879%" y="549" width="65.0000%" height="15" fill="rgb(223,20,43)" fg:x="223" fg:w="429"/><text x="34.0379%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (429 samples, 65.00%)</title><rect x="33.7879%" y="533" width="65.0000%" height="15" fill="rgb(229,81,49)" fg:x="223" fg:w="429"/><text x="34.0379%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (429 samples, 65.00%)</title><rect x="33.7879%" y="517" width="65.0000%" height="15" fill="rgb(236,28,36)" fg:x="223" fg:w="429"/><text x="34.0379%" y="527.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (429 samples, 65.00%)</title><rect x="33.7879%" y="501" width="65.0000%" height="15" fill="rgb(249,185,26)" fg:x="223" fg:w="429"/><text x="34.0379%" y="511.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (429 samples, 65.00%)</title><rect x="33.7879%" y="485" width="65.0000%" height="15" fill="rgb(249,174,33)" fg:x="223" fg:w="429"/><text x="34.0379%" y="495.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (429 samples, 65.00%)</title><rect x="33.7879%" y="469" width="65.0000%" height="15" fill="rgb(233,201,37)" fg:x="223" fg:w="429"/><text x="34.0379%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dev_to_dev::spawn_threads::{{closure}} (429 samples, 65.00%)</title><rect x="33.7879%" y="453" width="65.0000%" height="15" fill="rgb(221,78,26)" fg:x="223" fg:w="429"/><text x="34.0379%" y="463.50">dev_to_dev::spawn_threads::{{closure}}</text></g><g><title>dev_to_dev::tx_pkts (428 samples, 64.85%)</title><rect x="33.9394%" y="437" width="64.8485%" height="15" fill="rgb(250,127,30)" fg:x="224" fg:w="428"/><text x="34.1894%" y="447.50">dev_to_dev::tx_pkts</text></g><g><title>xdpsock::xsk::tx::XskTx::send_apply (400 samples, 60.61%)</title><rect x="38.1818%" y="421" width="60.6061%" height="15" fill="rgb(230,49,44)" fg:x="252" fg:w="400"/><text x="38.4318%" y="431.50">xdpsock::xsk::tx::XskTx::send_apply</text></g><g><title>xdpsock::xsk::tx::XskTx::put_batch_on_tx_queue (35 samples, 5.30%)</title><rect x="93.4848%" y="405" width="5.3030%" height="15" fill="rgb(229,67,23)" fg:x="617" fg:w="35"/><text x="93.7348%" y="415.50">xdpsoc..</text></g><g><title>xdpsock::socket::socket::TxQueue::produce_and_wakeup (26 samples, 3.94%)</title><rect x="94.8485%" y="389" width="3.9394%" height="15" fill="rgb(249,83,47)" fg:x="626" fg:w="26"/><text x="95.0985%" y="399.50">xdps..</text></g><g><title>xdpsock::socket::socket::TxQueue::wakeup (3 samples, 0.45%)</title><rect x="98.3333%" y="373" width="0.4545%" height="15" fill="rgb(215,43,3)" fg:x="649" fg:w="3"/><text x="98.5833%" y="383.50"></text></g><g><title>__libc_sendto (3 samples, 0.45%)</title><rect x="98.3333%" y="357" width="0.4545%" height="15" fill="rgb(238,154,13)" fg:x="649" fg:w="3"/><text x="98.5833%" y="367.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.45%)</title><rect x="98.3333%" y="341" width="0.4545%" height="15" fill="rgb(219,56,2)" fg:x="649" fg:w="3"/><text x="98.5833%" y="351.50"></text></g><g><title>do_syscall_64 (3 samples, 0.45%)</title><rect x="98.3333%" y="325" width="0.4545%" height="15" fill="rgb(233,0,4)" fg:x="649" fg:w="3"/><text x="98.5833%" y="335.50"></text></g><g><title>__x64_sys_sendto (2 samples, 0.30%)</title><rect x="98.4848%" y="309" width="0.3030%" height="15" fill="rgb(235,30,7)" fg:x="650" fg:w="2"/><text x="98.7348%" y="319.50"></text></g><g><title>__sys_sendto (2 samples, 0.30%)</title><rect x="98.4848%" y="293" width="0.3030%" height="15" fill="rgb(250,79,13)" fg:x="650" fg:w="2"/><text x="98.7348%" y="303.50"></text></g><g><title>sock_sendmsg (2 samples, 0.30%)</title><rect x="98.4848%" y="277" width="0.3030%" height="15" fill="rgb(211,146,34)" fg:x="650" fg:w="2"/><text x="98.7348%" y="287.50"></text></g><g><title>security_socket_sendmsg (1 samples, 0.15%)</title><rect x="98.6364%" y="261" width="0.1515%" height="15" fill="rgb(228,22,38)" fg:x="651" fg:w="1"/><text x="98.8864%" y="271.50"></text></g><g><title>apparmor_socket_sendmsg (1 samples, 0.15%)</title><rect x="98.6364%" y="245" width="0.1515%" height="15" fill="rgb(235,168,5)" fg:x="651" fg:w="1"/><text x="98.8864%" y="255.50"></text></g><g><title>aa_sk_perm (1 samples, 0.15%)</title><rect x="98.6364%" y="229" width="0.1515%" height="15" fill="rgb(221,155,16)" fg:x="651" fg:w="1"/><text x="98.8864%" y="239.50"></text></g><g><title>clone (435 samples, 65.91%)</title><rect x="33.0303%" y="661" width="65.9091%" height="15" fill="rgb(215,215,53)" fg:x="218" fg:w="435"/><text x="33.2803%" y="671.50">clone</text></g><g><title>start_thread (430 samples, 65.15%)</title><rect x="33.7879%" y="645" width="65.1515%" height="15" fill="rgb(223,4,10)" fg:x="223" fg:w="430"/><text x="34.0379%" y="655.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (430 samples, 65.15%)</title><rect x="33.7879%" y="629" width="65.1515%" height="15" fill="rgb(234,103,6)" fg:x="223" fg:w="430"/><text x="34.0379%" y="639.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (1 samples, 0.15%)</title><rect x="98.7879%" y="613" width="0.1515%" height="15" fill="rgb(227,97,0)" fg:x="652" fg:w="1"/><text x="99.0379%" y="623.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.15%)</title><rect x="98.7879%" y="597" width="0.1515%" height="15" fill="rgb(234,150,53)" fg:x="652" fg:w="1"/><text x="99.0379%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.15%)</title><rect x="98.7879%" y="581" width="0.1515%" height="15" fill="rgb(228,201,54)" fg:x="652" fg:w="1"/><text x="99.0379%" y="591.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.15%)</title><rect x="98.7879%" y="565" width="0.1515%" height="15" fill="rgb(222,22,37)" fg:x="652" fg:w="1"/><text x="99.0379%" y="575.50"></text></g><g><title>mmap64 (1 samples, 0.15%)</title><rect x="98.7879%" y="549" width="0.1515%" height="15" fill="rgb(237,53,32)" fg:x="652" fg:w="1"/><text x="99.0379%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="98.7879%" y="533" width="0.1515%" height="15" fill="rgb(233,25,53)" fg:x="652" fg:w="1"/><text x="99.0379%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="98.7879%" y="517" width="0.1515%" height="15" fill="rgb(210,40,34)" fg:x="652" fg:w="1"/><text x="99.0379%" y="527.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.15%)</title><rect x="98.7879%" y="501" width="0.1515%" height="15" fill="rgb(241,220,44)" fg:x="652" fg:w="1"/><text x="99.0379%" y="511.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.15%)</title><rect x="98.7879%" y="485" width="0.1515%" height="15" fill="rgb(235,28,35)" fg:x="652" fg:w="1"/><text x="99.0379%" y="495.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.15%)</title><rect x="98.7879%" y="469" width="0.1515%" height="15" fill="rgb(210,56,17)" fg:x="652" fg:w="1"/><text x="99.0379%" y="479.50"></text></g><g><title>do_mmap (1 samples, 0.15%)</title><rect x="98.7879%" y="453" width="0.1515%" height="15" fill="rgb(224,130,29)" fg:x="652" fg:w="1"/><text x="99.0379%" y="463.50"></text></g><g><title>get_unmapped_area (1 samples, 0.15%)</title><rect x="98.7879%" y="437" width="0.1515%" height="15" fill="rgb(235,212,8)" fg:x="652" fg:w="1"/><text x="99.0379%" y="447.50"></text></g><g><title>arch_get_unmapped_area_topdown (1 samples, 0.15%)</title><rect x="98.7879%" y="421" width="0.1515%" height="15" fill="rgb(223,33,50)" fg:x="652" fg:w="1"/><text x="99.0379%" y="431.50"></text></g><g><title>vm_unmapped_area (1 samples, 0.15%)</title><rect x="98.7879%" y="405" width="0.1515%" height="15" fill="rgb(219,149,13)" fg:x="652" fg:w="1"/><text x="99.0379%" y="415.50"></text></g><g><title>unmapped_area_topdown (1 samples, 0.15%)</title><rect x="98.7879%" y="389" width="0.1515%" height="15" fill="rgb(250,156,29)" fg:x="652" fg:w="1"/><text x="99.0379%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.15%)</title><rect x="98.9394%" y="661" width="0.1515%" height="15" fill="rgb(216,193,19)" fg:x="653" fg:w="1"/><text x="99.1894%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.15%)</title><rect x="98.9394%" y="645" width="0.1515%" height="15" fill="rgb(216,135,14)" fg:x="653" fg:w="1"/><text x="99.1894%" y="655.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.15%)</title><rect x="98.9394%" y="629" width="0.1515%" height="15" fill="rgb(241,47,5)" fg:x="653" fg:w="1"/><text x="99.1894%" y="639.50"></text></g><g><title>do_execve (1 samples, 0.15%)</title><rect x="98.9394%" y="613" width="0.1515%" height="15" fill="rgb(233,42,35)" fg:x="653" fg:w="1"/><text x="99.1894%" y="623.50"></text></g><g><title>__do_execve_file (1 samples, 0.15%)</title><rect x="98.9394%" y="597" width="0.1515%" height="15" fill="rgb(231,13,6)" fg:x="653" fg:w="1"/><text x="99.1894%" y="607.50"></text></g><g><title>exec_binprm (1 samples, 0.15%)</title><rect x="98.9394%" y="581" width="0.1515%" height="15" fill="rgb(207,181,40)" fg:x="653" fg:w="1"/><text x="99.1894%" y="591.50"></text></g><g><title>search_binary_handler (1 samples, 0.15%)</title><rect x="98.9394%" y="565" width="0.1515%" height="15" fill="rgb(254,173,49)" fg:x="653" fg:w="1"/><text x="99.1894%" y="575.50"></text></g><g><title>load_elf_binary (1 samples, 0.15%)</title><rect x="98.9394%" y="549" width="0.1515%" height="15" fill="rgb(221,1,38)" fg:x="653" fg:w="1"/><text x="99.1894%" y="559.50"></text></g><g><title>elf_map (1 samples, 0.15%)</title><rect x="98.9394%" y="533" width="0.1515%" height="15" fill="rgb(206,124,46)" fg:x="653" fg:w="1"/><text x="99.1894%" y="543.50"></text></g><g><title>vm_mmap (1 samples, 0.15%)</title><rect x="98.9394%" y="517" width="0.1515%" height="15" fill="rgb(249,21,11)" fg:x="653" fg:w="1"/><text x="99.1894%" y="527.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.15%)</title><rect x="98.9394%" y="501" width="0.1515%" height="15" fill="rgb(222,201,40)" fg:x="653" fg:w="1"/><text x="99.1894%" y="511.50"></text></g><g><title>do_mmap (1 samples, 0.15%)</title><rect x="98.9394%" y="485" width="0.1515%" height="15" fill="rgb(235,61,29)" fg:x="653" fg:w="1"/><text x="99.1894%" y="495.50"></text></g><g><title>mmap_region (1 samples, 0.15%)</title><rect x="98.9394%" y="469" width="0.1515%" height="15" fill="rgb(219,207,3)" fg:x="653" fg:w="1"/><text x="99.1894%" y="479.50"></text></g><g><title>ext4_file_mmap (1 samples, 0.15%)</title><rect x="98.9394%" y="453" width="0.1515%" height="15" fill="rgb(222,56,46)" fg:x="653" fg:w="1"/><text x="99.1894%" y="463.50"></text></g><g><title>touch_atime (1 samples, 0.15%)</title><rect x="98.9394%" y="437" width="0.1515%" height="15" fill="rgb(239,76,54)" fg:x="653" fg:w="1"/><text x="99.1894%" y="447.50"></text></g><g><title>dev_to_dev (655 samples, 99.24%)</title><rect x="0.0000%" y="677" width="99.2424%" height="15" fill="rgb(231,124,27)" fg:x="0" fg:w="655"/><text x="0.2500%" y="687.50">dev_to_dev</text></g><g><title>xdpsock::xsk::tx::XskTx::complete_frames (1 samples, 0.15%)</title><rect x="99.0909%" y="661" width="0.1515%" height="15" fill="rgb(249,195,6)" fg:x="654" fg:w="1"/><text x="99.3409%" y="671.50"></text></g><g><title>all (660 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(237,174,47)" fg:x="0" fg:w="660"/><text x="0.2500%" y="703.50"></text></g><g><title>perf (5 samples, 0.76%)</title><rect x="99.2424%" y="677" width="0.7576%" height="15" fill="rgb(206,201,31)" fg:x="655" fg:w="5"/><text x="99.4924%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.76%)</title><rect x="99.2424%" y="661" width="0.7576%" height="15" fill="rgb(231,57,52)" fg:x="655" fg:w="5"/><text x="99.4924%" y="671.50"></text></g><g><title>do_syscall_64 (5 samples, 0.76%)</title><rect x="99.2424%" y="645" width="0.7576%" height="15" fill="rgb(248,177,22)" fg:x="655" fg:w="5"/><text x="99.4924%" y="655.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.76%)</title><rect x="99.2424%" y="629" width="0.7576%" height="15" fill="rgb(215,211,37)" fg:x="655" fg:w="5"/><text x="99.4924%" y="639.50"></text></g><g><title>do_execve (5 samples, 0.76%)</title><rect x="99.2424%" y="613" width="0.7576%" height="15" fill="rgb(241,128,51)" fg:x="655" fg:w="5"/><text x="99.4924%" y="623.50"></text></g><g><title>__do_execve_file (5 samples, 0.76%)</title><rect x="99.2424%" y="597" width="0.7576%" height="15" fill="rgb(227,165,31)" fg:x="655" fg:w="5"/><text x="99.4924%" y="607.50"></text></g><g><title>exec_binprm (5 samples, 0.76%)</title><rect x="99.2424%" y="581" width="0.7576%" height="15" fill="rgb(228,167,24)" fg:x="655" fg:w="5"/><text x="99.4924%" y="591.50"></text></g><g><title>search_binary_handler (5 samples, 0.76%)</title><rect x="99.2424%" y="565" width="0.7576%" height="15" fill="rgb(228,143,12)" fg:x="655" fg:w="5"/><text x="99.4924%" y="575.50"></text></g><g><title>load_elf_binary (5 samples, 0.76%)</title><rect x="99.2424%" y="549" width="0.7576%" height="15" fill="rgb(249,149,8)" fg:x="655" fg:w="5"/><text x="99.4924%" y="559.50"></text></g><g><title>begin_new_exec (5 samples, 0.76%)</title><rect x="99.2424%" y="533" width="0.7576%" height="15" fill="rgb(243,35,44)" fg:x="655" fg:w="5"/><text x="99.4924%" y="543.50"></text></g><g><title>perf_event_exec (5 samples, 0.76%)</title><rect x="99.2424%" y="517" width="0.7576%" height="15" fill="rgb(246,89,9)" fg:x="655" fg:w="5"/><text x="99.4924%" y="527.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.76%)</title><rect x="99.2424%" y="501" width="0.7576%" height="15" fill="rgb(233,213,13)" fg:x="655" fg:w="5"/><text x="99.4924%" y="511.50"></text></g><g><title>ctx_resched (5 samples, 0.76%)</title><rect x="99.2424%" y="485" width="0.7576%" height="15" fill="rgb(233,141,41)" fg:x="655" fg:w="5"/><text x="99.4924%" y="495.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.76%)</title><rect x="99.2424%" y="469" width="0.7576%" height="15" fill="rgb(239,167,4)" fg:x="655" fg:w="5"/><text x="99.4924%" y="479.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.76%)</title><rect x="99.2424%" y="453" width="0.7576%" height="15" fill="rgb(209,217,16)" fg:x="655" fg:w="5"/><text x="99.4924%" y="463.50"></text></g><g><title>native_write_msr (5 samples, 0.76%)</title><rect x="99.2424%" y="437" width="0.7576%" height="15" fill="rgb(219,88,35)" fg:x="655" fg:w="5"/><text x="99.4924%" y="447.50"></text></g></svg></svg>